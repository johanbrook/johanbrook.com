<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>Johan&apos;s Writings</title>
    <link>https://johan.im/</link>
    <atom:link href="https://johan.im/writings.xml" rel="self" type="application/rss+xml"/>
    <description></description>
    <lastBuildDate>Tue, 23 Apr 2024 08:47:44 GMT</lastBuildDate>
    <language>en</language>
    <item>
      <title>Posting to Mastodon when deploying a static site</title>
      <link>https://johan.im/writings/posting-mastodon-deploying-static-site/</link>
      <guid isPermaLink="false">https://johan.im/writings/posting-mastodon-deploying-static-site/</guid>
      <description>tldr; find the latest note, check if it&apos;s not posted already, post, persist to log file.</description>
      <content:encoded>
        <![CDATA[<p>This is how I made my <a href="https://johan.im/micro">micro notes</a> auto-post to my Mastodon account. Warning: duct-tape and
        strings ahead. I wrote this system during the nighttime hours in the hospital, where I watched over
        our 10 month old baby who had contracted bronchitis (no worries, everything turned out fine with
        her).</p>
        <h2>Preface: my setup</h2>
        <ul>
        <li>I use a static site generator. I use <a href="http://lume.land/">Lume</a>, but that doesn't really matter.</li>
        <li>I host my site on GitHub Pages. Not likely to matter.</li>
        <li>I use GitHub Actions for actually deploying my site from the repo to GitHub Pages. This probably
        matters a lot. As long as you have <em>something</em> that runs on every push, you should be able to
        translate the steps below to <code>$YOUR_CI</code>.</li>
        </ul>
        <p>I don't use any persistent database anywhere (I use Cloudflare functions for other features in this
        site). Since the entrypoint to deploy <em>anything</em> on this site is via pushing commits onto the <code>main</code>
        branch, that's the key for doing anything &quot;hook-y&quot;, like taking an action when some content is
        updated.</p>
        <hr>
        <h2>The plan</h2>
        <p>Roughly, it works like below. You should be able to translate it to your host/CI runner:</p>
        <ol>
        <li>Push new micro note/blog post.</li>
        <li>On CI, check out the code base and find the filename of the post file. Make some slug/ID out of
        it.</li>
        <li>Look for the slug/ID in a checked in file. This is our &quot;database&quot; over already posted files.</li>
        <li>If it's there, bail.</li>
        <li>If not, we run a script to format the post text and post it to Mastodon over its API.</li>
        <li>Write the file slug/ID to the checked in file. Commit and push (this is still in CI).</li>
        </ol>
        <details class="Notice">
        <summary>Bonus</summary>
        <p>I also do some fanciness before step 5) where I wait before the site is fully deployed before I post
        to Mastodon. If not, people could click the linkback to the post on Mastodon and get to a 404 on my
        site!</p>
        <p>Here's the source code. Note the <code>ENDPOINT</code> variable which is <code>https://johan.im/status.json</code>, where
        I — at build time — put all goodies.</p>
        <pre><code class="language-bash">#!/usr/bin/env bash
        #
        # Waits for a give note to be deployed at johan.im
        #
        # Usage:
        # ./script/wait-for-status.sh &lt;path to note&gt;
        # ./script/wait-for-status.sh --latest
        
        ENDPOINT=&quot;https://johan.im/status.json&quot;
        DIR=&quot;src/notes&quot;
        
        file_path=&quot;$1&quot;
        
        if [ -z &quot;$file_path&quot; ]; then
        echo &quot;Usage: script/wait-for-status.sh &lt;path&gt; | --latest&quot;
        exit 1
        fi
        
        if [ &quot;$file_path&quot; == &quot;--latest&quot; ]; then
        file_path=$(ls -r1 &quot;$DIR&quot; | grep -v &quot;_&quot; | head -n 1)
        else
        file_path=$(basename &quot;$file_path&quot;)
        fi
        
        # 2022-01-04-09-37.md -&gt; 202201040937
        file_id=$(echo &quot;$file_path&quot; | sed -e &quot;s/-//g&quot; | cut -f 1 -d &quot;.&quot;)
        
        while true; do
        deployed=$(curl -s &quot;$ENDPOINT&quot; | jq -r &quot;.micro&quot;)
        is_deployed=$([ &quot;$deployed&quot; = &quot;$file_id&quot; ] &amp;&amp; echo true || echo false)
        
        echo &quot;$([ &quot;$is_deployed&quot; = true ] &amp;&amp; echo &quot;✅&quot; || echo &quot;🕣&quot;) [$(date -u)] Deployed: $deployed $([ &quot;$is_deployed&quot; = true ] &amp;&amp; echo &quot;==&quot; || echo &quot;!=&quot;) Latest: $file_id&quot;
        
        if [ &quot;$is_deployed&quot; = true ]; then
        break
        fi
        
        sleep 2
        done
        </code></pre>
        </details>
        <h2>Deciding when to post</h2>
        <p>As mentioned, I use GitHub Actions. YAML seems to be the requirement for all new CI tools these
        days, and Actions isn't an exception. This is how the first part of my
        <code>.github/workflows/deploy.yml</code> looks like. The code below includes the steps 2-3):</p>
        <details>
        <summary><code>deploy.yml</code></summary>
        <pre><code class="language-yaml">name: Build and deploy
        
        on:
        push:
        paths:
        - &quot;src/**/*&quot;
        
        env:
        DENO_VERSION: v1.40.3
        MASTODON_LOG_FILE: .mastodon-notes
        NOTES_DIR: src/notes
        
        jobs:
        build:
        name: Build
        # Omitted: builds the static site into .html files
        deploy:
        name: Deploy
        # Omitted: puts the built site onto gh-pages branch
        check_latest_note:
        name: Check latest note
        runs-on: ubuntu-latest
        outputs:
        do_post: ${{ steps.mastodon_note_check.outputs.do_post }}
        latest_note_id: ${{ steps.mastodon_note_check.outputs.latest_note_id }}
        latest_note_path: ${{ steps.mastodon_note_check.outputs.latest_note_path }}
        steps:
        - name: Checkout code
        uses: actions/checkout@v4
        
        - name: Check if latest note is already posted
        id: mastodon_note_check
        run: |
        latest=&quot;$NOTES_DIR/$(ls -r1 &quot;$NOTES_DIR&quot; | grep -v &quot;_&quot; | head -n 1)&quot;
        note_id=$(./script/check-mastodon-note.sh &quot;$latest&quot;)
        [ -z &quot;$note_id&quot; ] &amp;&amp; echo &quot;Latest note $latest is posted. Bail.&quot; || echo &quot;Latest note $latest is not posted. Do post.&quot;
        [ ! -z &quot;$note_id&quot; ] &amp;&amp; echo &quot;do_post=true&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
        echo &quot;latest_note_id=$note_id&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
        echo &quot;latest_note_path=$latest&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
        cat &quot;$GITHUB_OUTPUT&quot;
        env:
        NOTES_DIR: ${{ env.NOTES_DIR }}
        </code></pre>
        </details>
        <p>Let's go over it.</p>
        <pre><code class="language-bash">latest=&quot;$NOTES_DIR/$(ls -r1 &quot;$NOTES_DIR&quot; | grep -v &quot;_&quot; | head -n 1)&quot;
        </code></pre>
        <p>This puts the latest file in <code>src/notes</code> into a <code>$latest</code> variable. Like this:</p>
        <pre><code class="language-bash">$ NOTES_DIR=&quot;src/notes&quot;
        $ latest=&quot;$NOTES_DIR/$(ls -r1 &quot;$NOTES_DIR&quot; | grep -v &quot;_&quot; | head -n 1)&quot;
        $ echo $latest
        src/notes/2024-02-03-21-21-00.md
        </code></pre>
        <p>We feed that into the <code>check-mastodon-note.sh</code> script I have in a separate file, since I'm an
        inconsistent, chaotic programmer. Before reading that code, I'll show you how my &quot;database&quot; over
        posted notes look like:</p>
        <pre><code class="language-bash">$ cat .mastodon-notes
        20231215140531
        20240106124758
        20240118204458
        </code></pre>
        <p>It's an append log with the note date (hyphens removed). Ergo, if the note date is in that list,
        we've posted to Mastodon already and can bail early.</p>
        <p>Here's my script for checking that:</p>
        <details>
        <summary><code>check-mastodon-note.sh</code></summary>
        <pre><code class="language-bash">#!/usr/bin/env bash
        #
        # Check whether we've posted the input file path to Mastodon (persisted in $MASTODON_LIST)
        #
        # Usage:
        #
        # ./script/check-mastodon-note.sh &lt;path to file&gt;
        # ./script/check-mastodon-note.sh --latest
        # same as:
        # ./script/check-mastodon-note.sh $(ls -r1 &quot;src/notes&quot; | grep -v &quot;_&quot; | head -n 1)
        
        MASTODON_LIST=&quot;.mastodon-notes&quot;
        DIR=&quot;src/notes&quot;
        
        file_path=&quot;$1&quot;
        
        if [ &quot;$file_path&quot; == &quot;--latest&quot; ]; then
        file_path=$(ls -r1 &quot;$DIR&quot; | grep -v &quot;_&quot; | head -n 1)
        else
        file_path=$(basename &quot;$file_path&quot;)
        fi
        
        # 2022-01-04-09-37.md -&gt; 202201040937
        file_id=$(echo &quot;$file_path&quot; | sed -e &quot;s/-//g&quot; | cut -f 1 -d &quot;.&quot;)
        
        case `cat &quot;$MASTODON_LIST&quot; | grep -Fxq &quot;$file_id&quot; &gt;/dev/null; echo $?` in
        0)
        # found
        exit 0
        ;;
        1)
        # not found, continue
        echo &quot;$file_id&quot;
        exit 0
        ;;
        *)
        # error
        echo &quot;An error occurred when checking $MASTODON_LIST for note: $file_id&quot; 1&gt;&amp;2
        exit 1
        ;;
        esac
        </code></pre>
        </details>
        <p>We print the resulting note ID (date with hyphens removed) on <code>stdout</code> if we <em>don't</em> find it in the
        list. Sweet! Back to the deploy YAML:</p>
        <pre><code class="language-yaml">[ ! -z &quot;$note_id&quot; ] &amp;&amp; echo &quot;do_post=true&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
        echo &quot;latest_note_id=$note_id&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
        echo &quot;latest_note_path=$latest&quot; &gt;&gt; &quot;$GITHUB_OUTPUT&quot;
        </code></pre>
        <p>Push some metadata into the magic <code>GITHUB_OUTPUT</code> environment variable (which points to a file).
        This is GitHub's way of persisting data between jobs.</p>
        <h2>Posting to Mastodon's API</h2>
        <p>This is the API posting part of <code>deploy.yml</code>:</p>
        <details>
        <summary><code>deploy.yml</code></summary>
        <pre><code class="language-yaml">post_mastodon:
        name: Post to Mastodon
        needs: [deploy, check_latest_note] # can't send post with permalink until site is deployed
        runs-on: ubuntu-latest
        if: needs.check_latest_note.outputs.do_post == 'true'
        steps:
        - name: Checkout code
        uses: actions/checkout@v4
        
        - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
        deno-version: ${{ env.DENO_VERSION }}
        
        - name: Post to Mastodon API
        run: deno run --allow-net --allow-read --allow-write --allow-env script/mastodon.ts &quot;$LATEST_NOTE_PATH&quot;
        env:
        MASTODON_ACCESS_TOKEN: ${{ secrets.MASTODON_ACCESS_TOKEN }}
        LATEST_NOTE_PATH: ${{ needs.check_latest_note.outputs.latest_note_path }}
        </code></pre>
        </details>
        <p><code>if: needs.check_latest_note.outputs.do_post == 'true'</code> will skip this job if we bailed in the
        previous job. Very handy.</p>
        <details class="Notice">
        <summary>How to obtain an access token for Mastodon's API</summary>
        <p>Fear not, Mastodon are one of those services which has a seat in heaven: they give you a plain old
        access token (bearer) which you can use in all API calls 🥹 No messing around with OAuth.</p>
        <p>Read all about it <a href="https://docs.joinmastodon.org/client/token/">in their docs</a>.</p>
        <p>Then put the token as <code>MASTODON_ACCESS_TOKEN</code> in your repo's secret section in settings.</p>
        </details>
        <p>The <code>mastodon.ts</code> script itself isn't that interesting. In a nutshell, it reads the contents of the
        file on the path it receives as script argument, parses some front matter, truncates the text, makes
        a permalink, and do a <code>POST</code> to the API.</p>
        <details>
        <summary><code>mastodon.ts</code></summary>
        <pre><code class="language-ts">// deno run --allow-net --allow-read --allow-write --allow-env script/mastodon.ts &lt;path&gt;
        // Env vars:
        // - MASTODON_ACCESS_TOKEN
        // - DRY (optional)
        
        import { parse } from 'yaml';
        import { extract } from 'front_matter/any.ts';
        import { notePermalinkOf } from '../src/_includes/permalinks.ts';
        import * as path from 'path';
        
        const DRY_RUN = !!Deno.env.get('DRY');
        
        const accessToken = Deno.env.get('MASTODON_ACCESS_TOKEN');
        
        if (!accessToken) {
        console.error('No ACCESS_TOKEN');
        Deno.exit(1);
        }
        
        const metaFile = import.meta.dirname + '/../src/_data/meta.yml';
        
        interface Meta {
        site: string;
        mastodon: {
        instance?: string;
        };
        }
        const meta = (await Deno.readTextFile(metaFile).then(parse)) as Partial&lt;Meta&gt;;
        
        if (!meta?.mastodon?.instance) {
        console.error(`No mastodon.instance key in ${metaFile.toString()}`);
        Deno.exit(1);
        }
        
        const truncateToStatus = (str: string, permalink: string) =&gt; {
        const maxLimit = 500;
        const footer = `\n\n↳ ${permalink}`;
        const statusLimit = maxLimit - footer.length;
        
        if (str.length &lt;= statusLimit) {
        return str + footer;
        }
        
        return str.slice(0, statusLimit - 1) + '…' + footer;
        };
        
        const API_ROOT = `https://${meta.mastodon.instance}`;
        
        const postStatus = async (filePath: string) =&gt; {
        console.log(`Posting contents of ${filePath}`);
        
        const latestId = path.basename(filePath).replaceAll('-', '').split('.').at(0)!;
        
        console.log(`Latest note ID is: ${latestId}`);
        
        const note = extract(await Deno.readTextFile(import.meta.dirname + `/../${filePath}`));
        
        if (note.attrs.draft || note.attrs.skip_mastodon) {
        console.log(
        `Skipping posting because one of &quot;draft&quot; or &quot;skip_mastodon&quot; are true for note ${filePath}`,
        );
        return;
        }
        
        const permalink = meta.site + notePermalinkOf(latestId);
        
        const statusBody = truncateToStatus(note.body.trim(), permalink);
        
        console.log(
        `&gt; Posting status (${statusBody.length} chars):\n----------------------------\n${statusBody}`,
        );
        
        if (DRY_RUN) {
        console.log(`&gt; Status posted to &lt;DRY RUN&gt;`);
        return;
        }
        
        const url = new URL('/api/v1/statuses', API_ROOT);
        const form = new FormData();
        
        form.append('status', statusBody);
        
        const res = await fetch(url, {
        method: 'POST',
        headers: {
        Authorization: `Bearer ${accessToken}`,
        'Idempotency-Key': crypto.randomUUID(),
        },
        body: form,
        });
        
        const json = await res.json();
        
        if (!res.ok) {
        throw new Error(`Posting failed with ${res.status}: ${json.error}`);
        }
        
        console.log(`&gt; Status posted to ${json.url}`);
        };
        
        // Main
        
        if (!Deno.args[0]) {
        console.error('Run with mastodon.ts &lt;path to note&gt;');
        Deno.exit(1);
        }
        
        await postStatus(Deno.args[0]).catch((err) =&gt; {
        console.error(err);
        Deno.exit(1);
        });
        </code></pre>
        </details>
        <h2>Persisting to the database file</h2>
        <p>Yay, you've made it this far! Let's check out the final stretch of the lovely YAML:</p>
        <details>
        <summary><code>deploy.yml</code></summary>
        <pre><code class="language-yaml">- name: Write to log
        run: |
        echo &quot;$LATEST_UNPOSTED&quot; &gt;&gt; $MASTODON_LOG_FILE
        cat &quot;$MASTODON_LOG_FILE&quot;
        env:
        MASTODON_LOG_FILE: ${{ env.MASTODON_LOG_FILE }}
        LATEST_UNPOSTED: ${{ needs.check_latest_note.outputs.latest_note_id }}
        
        - name: Commit and push posted notes
        run: |
        git config user.name &quot;Automated&quot;
        git config user.email &quot;actions@users.noreply.github.com&quot;
        git add $MASTODON_LOG_FILE
        timestamp=$(date -u)
        git commit -m &quot;Latest post to Mastodon: $timestamp [skip-ci]&quot; || exit 0
        git push
        env:
        MASTODON_LOG_FILE: ${{ env.MASTODON_LOG_FILE }}
        </code></pre>
        </details>
        <ol>
        <li>Append the date/ID of the latest post into the log/database file.</li>
        <li>Commit this and push to persist.</li>
        </ol>
        <p>Done!</p>
        <hr>
        <p>As you can see, it's essentially just keeping track of the latest unposted file and shoves that
        around betwen the steps in the GitHub Action 🤷 But I like the approach of thinking in files and
        thus always keeping the state within the repo's boundaries.</p>
        <p>I love DIY solutions over external services. Mo' dependencies, mo' problems.</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 07 Feb 2024 14:36:58 GMT</pubDate>
    </item>
    <item>
      <title>Mastodon</title>
      <link>https://johan.im/writings/mastodon/</link>
      <guid isPermaLink="false">https://johan.im/writings/mastodon/</guid>
      <description>My thoughts on Mastodon, after having used it for more than a month.</description>
      <content:encoded>
        <![CDATA[<p>During November this year, Elon Musk took over as acting CEO of Twitter. It was a horrible event: it
        felt like the end of the world, and ideological users left or set up alternative social media
        accounts for themselves. It became totally normal to tweet your contact details with &quot;Find me at X&quot;
        (as I've would go through all those tweets and follow people on Instagram/Tumblr/what-have-you) like
        the service would shut down at any given time.</p>
        <p>Now, the (Twitter) apocalypse didn't come. It might still do, because Elon either kicked or caused
        thousands of employees to leave. But I think a non-trivial blow was caused against the OG social
        media giant, since people like me actually got off of their asses and created Mastodon accounts. I
        recommend skimming through the
        <a href="https://en.wikipedia.org/wiki/Mastodon_(social_network)">Wikipedia page for Mastodon</a> (huh, it was
        started as recently as 2016, I didn't know that).</p>
        <p>I've loved Twitter from all the way since I joined in 2008. I recall my &quot;final exam&quot; project in high
        school was a Twitter client built in Java and Swing. Twitter has enriched my digital life with
        knowledge, joy, random banter, news, and true sense of &quot;we&quot; during major events. Sentimentally, like
        a big ol' family. However, I'm totally aware of the problems of the platform when it comes to
        harassment and the likes. Also, I've heard the product itself (the web UI and mobile apps) isn't
        among people's favourite things to interact with. Non-linear timeline, suggestions, seeing tweets
        from people you don't follow, ads, etc. etc. I've had non of that, since I've used the
        <a href="https://tapbots.com/">Tweetbot clients for Mac and iOS</a> for years. That's how I've kept sane during
        all this time. I urge you to try out a 3rd party client too.</p>
        <p>Speaking of 3rd party clients leads me into this interesting topic: openness and ownership. At
        certain points in time, Twitter took measures in severely limiting their 3rd party APIs so that app
        developers couldn't provide all the features you'd get with Twitter's own apps. This sucks for us
        users, obviously, but from a bUsIneSs pErSpEctIvE it makes sense: Twitter is a public company with
        obligations to their shareholders. I get that. (Even though they still don't do well financially.)
        In Mastodon world (&quot;the fediverse&quot; – Federated Universe), this could never happen, because there's
        not a single entity in control over the APIs. For an &quot;internet enthusiast&quot; as myself, steeped in
        90s/00s open software culture and with a gradual dissatisfaction with centralised companies in
        Silicon Valley owning my shit, Mastodon is really lovely.</p>
        <p>Mastodon is:</p>
        <ul>
        <li>open source, so you can fork the source code and run it on your on server</li>
        <li>maintained by a German non-profit (not an American organisation for once! *tears of joy)</li>
        <li>ad-free, backed by supporters</li>
        <li>Supporting W3C's <a href="https://en.wikipedia.org/wiki/ActivityPub">ActivityPub</a> protocol for talking
        with other services</li>
        <li>decentralised, anybody can boot up their own Mastodon instance and connect to the &quot;federation&quot;</li>
        </ul>
        <p>The last point is of course not something regular users will do. This quote comes to mind:</p>
        <blockquote>
        <p>People don’t want to run their own servers, and never will.</p>
        <p><a href="https://moxie.org/2022/01/07/web3-first-impressions.html">Moxie Marlinspike</a></p>
        </blockquote>
        <p>This is just an implementation detail, but I like that you <em>can</em> do this. But I won't. Instead, I
        trust the instance I'm registered to at the moment. But if I wanted to, I could just take my stuff
        and migrate to another instance. This is really important, since it lowers the anxiety of picking an
        instance when you sign up (they should front this more in the onboarding).</p>
        <p>The &quot;how to pick an instance&quot; part of Mastodon is probably their biggest UX challenge at the moment.
        I'm at <a href="https://hachyderm.io/about">Hachyderm</a>, which is run by a great engineer at GitHub. The
        instance is well maintained and has sane server rules. How did I find it? Via
        <a href="https://hachyderm.io/@mislav">@mislav</a> on Twitter, in his
        <a href="https://twitter.com/mislav/status/1592905424214274049">good intro thread</a> to Mastodon.</p>
        <p>I'm kind of torn on the subject of &quot;Twitter vs Mastodon&quot;. One one hand, I love the hacker ethics of
        Mastodon. On the other hand, I love the original attitudes of Twitter and <em>my</em> timeline. I don't
        want Twitter to fail per se, but at the same time, I'm happy that Mastodon got an influx of users
        during the Elon Musk takeover. But the takeover was, to me, completely unnecessary. They did not
        have to sell to Musk. Now, a month later, a <em>bunch</em> of great engineers – some of the best in the
        world – have left the company. Twitter may have suffered from the ordinary big-co Silicon Valley
        bullshit when it comes to policies, investors, management, and so on, but I've heard their
        engineering team is really, really great. So I'm sad for them having to leave their work and code
        due to the rich asshole barging in.</p>
        <p>Now when the dust has settled a bit after the Twitter doomsday frenzy, I appreciate Mastodon <em>a
        lot</em>. It's so cosy checking out my timeline there, since it feels like Twitter felt in the
        beginning, before the harsh reality of profit making got on them. The hacker feel of the system also
        brings out nostalgia. Even though I've been guarded from most of Twitter's bad product decisions
        thanks to the aforementioned choice of 3rd party clients, the feel of Mastodon is something special.
        Maybe it's just a feel of starting over. But it creates a fuzzy feeling knowing that the project is
        based on attitudes and philosophies I can get behind. Does it have the same reach and scale as
        Twitter? Of course not, that's not the goal. Most Twitter users whose tweets I enjoy the most are on
        Mastodon anyway. Is it annoying checking two apps? A bit, yes, but the content also vary in that
        Mastodon posts (&quot;toots&quot;) feels more well written and have higher quality.</p>
        <p>Mastodon certainly isn't perfect. It surely has or will have its problems and scandals or whatnot.
        We'll see. For now though, I'm just happy to have discovered a new project and technology I like for
        myself.</p>
        <p>Now I'm just waiting for Tapbot's <a href="https://hachyderm.io/@ivory@tapbots.social">Ivory</a> client to
        land…</p>
        <p>(I'm <a href="https://hachyderm.io/@brookie">@brookie@johan.im</a> on Mastodon by the way!)</p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 30 Dec 2022 10:20:00 GMT</pubDate>
    </item>
    <item>
      <title>My favourite software</title>
      <link>https://johan.im/writings/my-favourite-software/</link>
      <guid isPermaLink="false">https://johan.im/writings/my-favourite-software/</guid>
      <description>Various software I love and use a lot.</description>
      <content:encoded>
        <![CDATA[<h2>1. Typescript</h2>
        <p>I started programming in Java and PHP. Those two worlds were vastly different. PHP stood for
        freedom, fun, and anything-is-possible. Java was rigid, hard, and verbose – much because of the need
        for <em>types</em> everywhere. However, when I got the Java code to compile, it was <em>usually</em> okay in
        runtime (as okay it can be for a 15 year old). Java was heavily used in university, and I grew to
        hate it even more. The interpreted languages like PHP, Ruby, and Javascript felt much nicer.</p>
        <p>Fast forward to around 2018, and I got the chance to play around with Typescript (and GraphQL) at
        work. This was a turning point in my journey as programmer: the types actually helped me. The type
        system – although not as &quot;correct&quot; as in Haskell et al – was expressive, flexible, and quite easy to
        understand. And the language itself resembled Javascript so much I didn't think about it.</p>
        <p>What I love about Typescript is:</p>
        <ul>
        <li>the no-nonsense setup:<pre><code class="language-bash">npm i --save-dev typescript
        touch script.ts
        npx tsc script.ts
        </code></pre>
        </li>
        <li>the backwards compatibility with Javascript: one can gradually add types if that suits the
        project.</li>
        <li>I'm not annoyed over any particular syntax of the language.</li>
        <li>that it's actively maintained, and the community is growing and full of tools.</li>
        </ul>
        <hr>
        <p>Typescript is probably the single piece of software that has made me write better code over the last
        few years. I need less automatic tests, less or no linting. It has opened a new world (of types) to
        me, and has made me never wanting to go back.</p>
        <h2>2. Deno</h2>
        <p><a href="https://deno.land/">Deno</a> is what NodeJS was supposed to be. I think. It's a new Javascript runtime
        which does a lot of things right. Peruse the Manual and if you've written a bit of NodeJS, you'll
        probably find yourself nod along as you read through the Deno docs.</p>
        <p>There are a lot of built-in things, and the ecosystem is spreading. Typescript is a first class
        citizen. Testing, formatting, and linting are included. Web APIs are available on the server.</p>
        <p>Deno fixes so many things in Node which I'd either get annoyed with or work around.</p>
        <h2>3. cUrl</h2>
        <p>The <code>curl</code> command just works. There are wrappers and replacements which are &quot;simpler&quot; and more
        intuitive. But this is one of these cases where I think it's good to learn the low level tools,
        since <code>curl</code> is available on a <em>lot</em> of machines.</p>
        <p>I for one appreciate elegant CLI tools which doesn't make me figure out their fantasy world of
        options and arguments. But <code>curl</code> is such a fundamental way to interact with remote data (I use it
        for HTTP 100% of the cases).</p>
        <h2>4. Lume</h2>
        <p><a href="https://lumeland.github.io/">Lume</a> is a static site generator (using Deno and Typescript). I
        recently moved to it from Eleventy, and before that from Jekyll -&gt; Wintersmith -&gt; Metalsmith. Lume
        is the first one which is close to 100% intuitive, and the first one that I'm not annoyed over when
        using. I've read some of the Lume source code, and it's lovely: succinct and readable.</p>
        <p>Lume does what it does, and does it really well.</p>
        <h2>5. Numi</h2>
        <p><a href="https://numi.app/">Numi</a> is a calculator app, like Soulver, which I use a couple of times per day.
        I've bound it to be visible when I press <code>cmd+shift+x</code> for quick calculations. I use it for
        everything from credit card bills to protein intake calculations. It's declarative in the sense that
        it &quot;does what I think it does&quot;. If I type <code>5% of 100g</code> it'll output <code>5 g</code>. It has
        <a href="https://github.com/nikolaeu/numi/wiki/Documentation">nice documentation</a>.</p>
        <p>Numi doesn't just to maths: it can deal with unit, timezone, and currency conversions too, and many
        other things.</p>
        <p>This tech isn't novel, but Numi pulls it off in a minimal packaging, and I love it.</p>
        <h2>6. Tweetbot</h2>
        <p>I honestly don't understand why people are using the regular Twitter.com or Twitter clients for
        iOS/Android. People complain daily about &quot;The Algorithm&quot;, non-chronological timelines, ads, etc.
        etc. Just start using a 3rd party client already!</p>
        <p>I've used a ton of clients since I joined Twitter. Many of them are now dead because of Twitter's
        big purge (they killed a lot of API functionality and tweaked some legal agreement I think). But
        <a href="https://tapbots.com/tweetbot/">Tweetbot</a> is still standing, and are actively pushing new features.
        I'm a happy subscriber.</p>
        <p>The team has always produced super slick designs, and their work is still cool in a world which
        doesn't really do skeumorphism any longer.</p>
        <p>Tweetbot for Mac and iOS have all the features I need. It makes intelligent use of gestures on
        respective platform, and I can customise things. No ads. No weird sorting or algorithm. It's
        literally how Twitter used to be.</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 23 Feb 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Setting up Sublime Text for Deno</title>
      <link>https://johan.im/writings/sublime-text-deno/</link>
      <guid isPermaLink="false">https://johan.im/writings/sublime-text-deno/</guid>
      <description>How I set up Sublime Text 4 for developing Deno code.</description>
      <content:encoded>
        <![CDATA[<p>I've recently switched back to Sublime Text as main editor, as described in a recent
        <a href="https://johan.im/micro/202202080950">/micro post</a>. As a test to get a feel for the ecosystem, I've set out on a
        journey to make it more ergonomic to develop <a href="https://deno.land/">Deno</a> code. &quot;Ergonomic&quot; as in
        &quot;actually use Typescript features and not show any red compile errors for Deno specific code&quot;. Also,
        I want to try to have Sublime support
        <a href="https://deno.land/manual/linking_to_external_code/import_maps">import maps</a>,
        <a href="https://deno.land/manual/getting_started/configuration_file">the Deno config file</a>, and format on
        save.</p>
        <h1>Install necessary packages</h1>
        <p>(I assume you have <a href="https://packagecontrol.io/installation">Package Control up and running</a>.)</p>
        <p><strong>Required:</strong></p>
        <ul>
        <li><a href="https://packagecontrol.io/packages/LSP">LSP</a>. Client implementation of the Language Server
        Protocol for Sublime Text. This is a base package, which is used by other language specific
        packages. There are packages for Typescript, CSS, Deno, JSON, Lua, Vue, etc. etc.</li>
        <li><a href="https://packagecontrol.io/packages/LSP-Deno">LSP-Deno</a>. Convenience package for starting the Deno
        LSP server. This enables Deno features in Sublime.</li>
        </ul>
        <p><strong>Optional:</strong></p>
        <ul>
        <li><a href="https://packagecontrol.io/packages/LSP-json">LSP-json</a>. Schema validation/completions for your
        JSON and Sublime files. This is for making JSON files more &quot;VS Code like&quot; in the way that keys in
        various settings files can be autocompleted and validated. Handy but in no way required.</li>
        </ul>
        <h2>Sublime project configuration</h2>
        <p>First of all, we need a place where we can instruct Sublime (and installed packages) where to look
        for custom Deno settings. That is, settings that describe paths to files, and lint and format
        config. Essentially holding the values described in
        <a href="https://deno.land/manual/getting_started/configuration_file">&quot;Configuration file&quot;</a>.</p>
        <p>These will go into a <code>xxx.sublime-project</code> file, where <code>xxx</code> is the name of your project (anything).
        Create one if you haven't.</p>
        <hr>
        <p>(Sublime has this concept of &quot;projects&quot; I don't really like. One has to go to <em>Window -&gt; Open
        project…</em> in order for the editor to actually load the project config file, <em>or</em> use
        <code>subl --project path/to/project.sublime-project</code>. It's not loaded when the editor is brought up via
        <code>subl .</code> from the command line. This feels lame. Sort of
        <a href="https://github.com/sublimehq/sublime_text/issues/828">tracked here</a>.)</p>
        <hr>
        <p>This is a sample <code>xxx.sublime-project</code> for Deno:</p>
        <pre><code class="language-json">{
        &quot;settings&quot;: {
        &quot;LSP&quot;: {
        &quot;LSP-typescript&quot;: {
        &quot;enabled&quot;: false
        },
        &quot;Deno&quot;: {
        &quot;enabled&quot;: true,
        &quot;settings&quot;: {
        &quot;deno.config&quot;: &quot;./deno.jsonc&quot;,
        &quot;deno.unstable&quot;: true,
        &quot;deno.importMap&quot;: &quot;./import_map.json&quot;,
        &quot;deno.suggest.imports.hosts&quot;: {
        &quot;https://deno.land&quot;: true,
        &quot;https://some-other-cdn.com&quot;: true
        }
        }
        }
        }
        }
        }
        </code></pre>
        <p>All <code>deno.*</code> settings are documented
        <a href="https://github.com/sublimelsp/LSP-Deno/blob/main/LSP-Deno.sublime-settings">here, with defaults</a>.</p>
        <p>Line by line:</p>
        <ul>
        <li><code>LSP-typescript</code>. Let's be really sure to disable the TypeScript Language Server, since that'll
        interfere with <code>.ts</code> files with Deno calls.</li>
        <li><code>deno.config</code>: Path to the Deno
        <a href="https://deno.land/manual/getting_started/configuration_file">configuration file</a>.</li>
        <li><code>deno.unstable</code>: Enable unstable features or not.</li>
        <li><code>deno.importMap</code>: Path to an <a href="https://deno.land/manual/npm_nodejs/import_maps">import map</a>.</li>
        <li><code>deno.suggest.imports.hosts</code>: Hosts that will appear as suggestions when importing.</li>
        </ul>
        <p>(As mentioned above, the LSP-json package really helps you with the autocomplete here. I found it
        tricky to figure out the exact structure of these settings.)</p>
        <p>For me, there's no need to do further tweaks in most Deno projects.</p>
        <p>Now, Sublime should be able to pick up your import map, as well as your Deno configuration.</p>
        <p>If configured correctly, you should be able to</p>
        <ul>
        <li>get IntelliSense popups when hovering over functions</li>
        <li>have working import maps</li>
        <li>get proper type info and autocompletions when coding</li>
        <li>have correct <code>compilerOptions</code> from your Deno config</li>
        </ul>
        <p>and lots more.</p>
        <p><img src="https://johan.im/assets/posts/deno-intellisense.png" alt="IntelliSense documentation popup"></p>
        <hr>
        <p><strong>Note:</strong> at the time of writing, there's an issue with the <code>deno.suggest.imports.hosts</code> key. If you
        toggle the LSP log panel (<em>Command palette -&gt; &quot;LSP: Toggle log panel&quot;</em>), you'll see that it says:</p>
        <pre><code>failed to update settings: invalid type: map, expected a boolean
        </code></pre>
        <p>I've filed an <a href="https://github.com/sublimelsp/LSP-Deno/issues/10">issue for LSP-Deno here</a>. I've
        noticed that this setting interfers with the other settings, so I've removed it for now.</p>
        <h2>Click to go to definition</h2>
        <p>This is a feature I heavily used in VS Code: use the combo of <code>option+click</code> (Mac) to go to the
        definition of a variable, function, or type. This uses the LSP, so it'll be &quot;intelligent&quot;.</p>
        <p>Mouse bindings live in this file (create it if it doesn't exist):</p>
        <pre><code>~/Library/Application\ Support/Sublime\ Text/Packages/User/Default\ (OSX).sublime-mousemap
        </code></pre>
        <p>Then add this:</p>
        <pre><code class="language-json">[
        {
        &quot;button&quot;: &quot;button1&quot;,
        &quot;count&quot;: 1,
        &quot;modifiers&quot;: [
        &quot;alt&quot;
        ],
        &quot;press_command&quot;: &quot;lsp_symbol_definition&quot;
        }
        ]
        </code></pre>
        <p>You can now use <code>alt+click</code> to jump around.</p>
        <h2>Rename symbols</h2>
        <p>Another nifty feature we can use the Language Server's capabilities for is to do smart renames, i.e.
        rename functions and variables and have them be intelligently updated across files.</p>
        <p>In VS Code, I used the key binding <code>cmd+shift+r</code> (Mac).</p>
        <p>Open up Key Bindings (<em>Preferences -&gt; Key Bindings</em>) or:</p>
        <pre><code class="language-bash">subl ~/Library/Application\ Support/Sublime\ Text/Packages/User/Default\ (OSX).sublime-keymap
        </code></pre>
        <p>Then add this:</p>
        <pre><code class="language-json">[
        {
        &quot;keys&quot;: [&quot;super+shift+r&quot;],
        &quot;command&quot;: &quot;lsp_symbol_rename&quot;,
        &quot;context&quot;: [
        {
        &quot;key&quot;: &quot;lsp.session_with_capability&quot;,
        &quot;operator&quot;: &quot;equal&quot;,
        &quot;operand&quot;: &quot;renameProvider&quot;
        }
        ]
        }
        ]
        </code></pre>
        <h2>Diagnostics panel</h2>
        <p>By default, the LSP package will show a diagnostics panel if there are TypeScript errors or warnings
        in your project. I found this really annoying, so I turned it off with:</p>
        <p><em>Preferences -&gt; Package Settings -&gt; LSP -&gt; Settings</em></p>
        <p>Then add:</p>
        <pre><code class="language-json">{
        // Open the diagnostics panel automatically on save when diagnostics level is
        // equal to or less than:
        // none: 0 (never open the panel automatically)
        // error: 1
        // warning: 2
        // info: 3
        // hint: 4
        &quot;show_diagnostics_panel_on_save&quot;: 0 // default is 2, turn off with 0
        }
        </code></pre>
        <p><strong>Tip:</strong> You can still toggle the <em>Diagnostics</em> panel with <code>cmd+alt+m</code> (Mac) or search for it in the
        command palette. It'll show any TypeScript errors or warnings in the project.</p>
        <h2>Code formatting</h2>
        <p>Deno comes with a built-in formatter, which the LSP in Sublime can use.</p>
        <p>Either run <code>LSP: Format file</code> from the command palette to format manually, or use format on save.
        The latter is configured in the LSP settings, <em>but</em> you should probably do it on a project basis.
        This means adding this to your Sublime project file:</p>
        <pre><code class="language-json">{
        &quot;settings&quot;: {
        &quot;lsp_format_on_save&quot;: true
        }
        }
        </code></pre>
        <p>The exact formatting config lives in your Deno configuration. For me, it's <code>deno.jsonc</code>:</p>
        <pre><code class="language-json">{
        &quot;fmt&quot;: {
        &quot;options&quot;: {
        &quot;useTabs&quot;: false,
        &quot;lineWidth&quot;: 100,
        &quot;singleQuote&quot;: true,
        &quot;indentWidth&quot;: 4
        }
        }
        }
        </code></pre>
        <h2>Bonus: JSON schema support for <code>deno.json</code></h2>
        <p>There's no built-in support for autocompletions in <code>deno.{json,jsonc}</code> files. But with our newly
        installed LSP-json package, there is a way! Deno publishes its schema for the config file on a URL,
        which we can add to &quot;user schemas&quot; in the LSP-json settings.</p>
        <p>Open <code>LSP-json.sublime-settings</code> or run <code>LSP-json Settings</code> in the command palette. Then add this:</p>
        <pre><code class="language-json">{
        &quot;settings&quot;: {
        &quot;userSchemas&quot;: [
        {
        &quot;fileMatch&quot;: [&quot;deno.json&quot;, &quot;deno.jsonc&quot;],
        &quot;uri&quot;: &quot;https://deno.land/x/deno@v1.18.2/cli/schemas/config-file.v1.json&quot;
        }
        ]
        }
        }
        </code></pre>
        <p>I guess one has to update the versions in there manually, but the package wouldn't follow the URL
        linked from Deno's
        <a href="https://deno.land/manual/getting_started/configuration_file">documentation page</a>, probably since it
        redirects:
        <a href="https://deno.land/x/deno/cli/schemas/config-file.v1.json">https://deno.land/x/deno/cli/schemas/config-file.v1.json</a>.</p>
        <hr>
        <p>That's it! <a href="https://johan.im/contact">Let me know</a> if you've got more tricks for working with Deno in Sublime.</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 16 Feb 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>A whole new world with Deno</title>
      <link>https://johan.im/writings/deno/</link>
      <guid isPermaLink="false">https://johan.im/writings/deno/</guid>
      <description>How I started to like programming in Javascript again thanks to Deno – a Rust based Javascript runtime which also runs Typescript.</description>
      <content:encoded>
        <![CDATA[<p><a href="https://deno.land/">Deno</a> is a new <em>runtime</em> for Javascript. Before, NodeJS used to be the most
        popular way to run Javascript on the server. But no more! Deno has reached stable state (it's on
        version 1.17 at the time of writing). It runs Typescript natively, supports ES imports (why did I
        feel I had to specify that as a feature?), and is built with Rust (again! This isn't a feature, but
        it feels good that it's Rust somehow, doesn't it?).</p>
        <p>Until now, I've just read the <a href="https://deno.land/manual">Deno manual</a> and lurked in their
        <a href="https://deno.land/std">standard library</a>. Then I played around with a server + client app for a
        couple of days, and after that I converted this site to use <a href="https://lumeland.github.io/">lume</a>,
        which is a static site generator based on Deno.</p>
        <p>Here are some of my personal favourites in Deno, with some love for lume as an appendix.</p>
        <h1>Web APIs we know and love</h1>
        <p>Deno includes a ton of niceties that just sparks joy for the hardest of the hardcore NodeJS
        developers out there. <code>fetch</code> <em>just works</em> (we've internalised that one needs to <code>npm install</code> some
        external library for HTTP requests in NodeJS). Hell, even doing the very browser-y <code>alert</code> and
        <code>confirm</code> in your Deno based CLI script will work on the command line to show a message and prompt
        for yes/no, respectively. Opinions might differ whether this is good or bad, but personally I
        appreciate not having to pull in a lib or visit StackOverflow each time I need user input.</p>
        <blockquote>
        <p>For APIs where a web standard already exists, like fetch for HTTP requests, Deno uses these rather
        than inventing a new proprietary API.</p>
        </blockquote>
        <p>The above line from <a href="https://deno.land/manual/runtime">&quot;The Runtime&quot;</a> section of the Manual is the
        red line throughout the Deno API.</p>
        <p>That means, instead of doing</p>
        <pre><code class="language-ts">// Node
        import request from 'some-random-npm-request-lib';
        
        const response = await request.get('https://deno.land');
        </code></pre>
        <p>you'd do</p>
        <pre><code class="language-ts">// Deno/browsers
        const response = await fetch('https://deno.land');
        </code></pre>
        <p>In Deno, you can use a ton of browser-y APIs, such as <code>location</code>, <code>local/sessionStorage</code>,
        <a href="https://deno.land/manual@v1.17.3/runtime/web_platform_apis#other-apis">and more</a>.</p>
        <p>Another example: you can use the same CSS based styling for <code>console</code> calls as you'd do in the
        browser:</p>
        <pre><code class="language-ts">// Deno/browsers
        console.log(
        '%cHi there. %cSome background?',
        'color: red',
        'background-color: gray',
        );
        </code></pre>
        <p>No need for terminal escape codes or pulling in yet another library.</p>
        <p>I hope it's clear where I'm getting at: there are things included in Deno that you <em>just know
        already</em> because you've been writing web code for years. It lowers the iteration speed when writing
        code, as well as lowers the overhead when reading it, when you don't have to refer to third party
        dependencies or in-house modules all the time. To me, this feels much better when writing code in
        Deno.</p>
        <p>The use of third party dependencies have been a debate in Javascript land during the past couple of
        months, due to … incidents around security and feelings of the module authors themselves. Surely the
        best dependency is no dependency, right? Surely a ton of npm modules can be deprecated if only
        NodeJS (or Javascript itself) had a better standard library?</p>
        <p>I hope that we in the future look at &quot;old&quot; code and say: &quot;Oh, did you pull in a dependency for
        <em>that</em>?&quot;.</p>
        <p><strong><em>Update, 2022-02-08:</em></strong> the Deno authors have written a neat
        <a href="https://deno.com/blog/every-web-api-in-deno">blog post</a> detailing all web platform APIs implemented
        in Deno, with examples. You'll get a very fuzzy feeling when reading the list.</p>
        <h1>Typescript as a first class citizen</h1>
        <p>I was in tears (tears of joy, I assure you) when I first read about Typescript support in Deno when
        the latter was introduced years ago. No need for a build step for <code>.ts</code> and <code>.tsx</code> files, just
        <code>deno run</code> and off you go. I just works.</p>
        <p>One neat API is <a href="https://deno.land/manual/typescript/runtime"><code>Deno.emit</code></a>. With it, you can
        programmatically compile and bundle Typescript code to Javascript.</p>
        <p>I've got not much more to say about this than <em>&quot;Finally&quot;</em>.</p>
        <h1>Testing</h1>
        <p>Let's play a game. How many test runners for Javascript code can you think of?</p>
        <p>…</p>
        <p>Okay, tough question, as the correct answer probably is: &quot;The number is approaching <code>Infinity</code>&quot;.</p>
        <p>How many test runners do you <em>need</em>? One. There's one built-in in Deno:</p>
        <pre><code class="language-ts">Deno.test('My test', () =&gt; {
        // test things
        });
        </code></pre>
        <p>Name the file <code>something.test.ts</code> and run it with:</p>
        <pre><code class="language-bash">deno test something.test.ts
        </code></pre>
        <p>I love this. Standardised, one way of doing things, minimal. No arguing in the team about which is
        the best test runner this month.</p>
        <p>The <a href="https://deno.land/std/testing"><code>testing</code></a> module from the Deno std lib includes a couple of
        assertions – you probably don't need more than those. (I also see it exports tools for benchmarking
        your code as well, iihhh!)</p>
        <h1>Distributed dependency management</h1>
        <p>…with no <code>package.json</code>! In Deno, you import external, remote, dependencies with URLs. Again, just
        like we've done in the browser since the 90s (<code>&lt;script src=&quot;http://cdn.example.com/script.js&gt;</code>
        amirite). When Deno first runs your code, it'll fetch the remote script and cache it locally for the
        next runs. Don't be scared: Deno do support reading and writing a lockfile with options to
        <code>deno run</code>.</p>
        <p>This is how it looks like:</p>
        <pre><code class="language-ts">import dependency from 'https://somesite.com/mod.ts';
        </code></pre>
        <p>(By convention, modules should have a <code>mod.ts</code> which is the entrypoint for consumers. Note that
        there's no concept of some silly <code>index.js</code> file in Deno land: that's one thing the Node creator
        Ryan wanted to get rid of when he created Deno.)</p>
        <p>This is actually fairly liberating once you've sweated out the feelings of chaos in your codebase.
        Remember, this is all source code! You can centralise all these third party imports to a single file
        and re-export them. In fact, that's what
        <a href="https://deno.land/manual@v1.18.0/linking_to_external_code#it-seems-unwieldy-to-import-urls-everywhere">they recommend in the Deno Manual</a>:</p>
        <pre><code class="language-ts">// deps.ts (naming convention!)
        export * as assert from 'https://deno.land/std@0.122.0/testing/asserts.ts';
        </code></pre>
        <p>&quot;Sooo how do I get my fav npm hosted lib into my Deno code then?&quot;, you ask.</p>
        <ol>
        <li>Check <a href="https://deno.land/x">deno.land/x</a> if the module is hosted there. There are a lot of Deno
        specific modules.</li>
        <li>Import from any of the services below.</li>
        </ol>
        <p>Services reading from npm:</p>
        <ul>
        <li><a href="https://www.skypack.dev/">Skypack</a></li>
        <li><a href="https://esm.sh/">esm.sh</a></li>
        <li><a href="https://unpkg.com/">unpkg.com</a></li>
        <li><a href="https://cdnjs.com/">cdnjs.com</a></li>
        </ul>
        <p>Skypack and esm.sh will actually bundle code from npm into modern ES module syntax. Both of them are
        Deno friendly.</p>
        <p>The beauty with these is that if one of them is failing, or if you're unhappy with the service, you
        can just switch out the URL imports in your <code>deps.ts</code>.</p>
        <p>Tip: with Skypack and esm.sh (from what I know) you get Typescript types too. esm.sh will do this
        automatically, and with Skypack you can append a <code>?dts</code> query parameter to the imported URL. See
        their respective config query parameters: it's super cool what they can do these days.</p>
        <p>One thing that tripped me up was that it's not always easy to find a suitable entrypoint file when
        importing via URLs. Deno friendly modules has a <code>mod.ts</code> in the repo somewhere, but often you have
        to hunt down a file yourself.</p>
        <h2>Import maps</h2>
        <p>I've glossed over the technology that is <a href="https://github.com/WICG/import-maps">Import Maps</a>. In my
        own words, I'd say it's a file where you specify from where the source code's <code>import</code> statements
        should look for the code to be imported. In a way, it's emulating npm's way of looking in
        <code>node_modules</code>, but this is even more powerful.</p>
        <p>If you were annoyed over importing &quot;raw&quot; URLs in the section above, this will save you!</p>
        <p><strong>Import map</strong></p>
        <pre><code class="language-json">{
        &quot;imports&quot;: {
        &quot;react&quot;: &quot;https://esm.sh/react@17.0.2&quot;
        }
        }
        </code></pre>
        <p><strong>Source code</strong></p>
        <pre><code class="language-ts">import React from 'react';
        </code></pre>
        <p>Remember to specify <code>--import-map</code> for <code>deno run</code>! Nothing in Deno is implicit: it won't pick up the
        import map by itself.</p>
        <h1>Summary</h1>
        <p>My overall impression of Deno that while it's new technology, it's quite mature and well documented.
        And if you've got a hairy question, you can pop into their Discord server and ask there. The <code>std</code>
        modules are very modern in the way they're written (compared to Node, which <em>just</em> got Promise based
        APIs…). It's actually fun to write Javascript code again. I'd attribute that to the decrease of
        &quot;Javascript fatigue&quot; in Deno, since there are so many built-in modules you'd previously assume you'd
        need to get from a third party.</p>
        <p><strong>When</strong> (hehe) you install Deno, be sure to do <code>deno help</code> in a terminal to see the range of nice
        sub commands. <code>deno types</code> and <code>deno doc</code> are favourites of mine. <code>deno compile</code> is also cool if
        you're writing a script which should be run as a self contained executable, suitable for
        distribution.</p>
        <h1>Appendix: lume</h1>
        <p><a href="https://lumeland.github.io/">lume</a> is a static site generator, built with Deno. I read through the
        documentation and jumped around in the source code for a while before I fell in love and ported
        johanbrook.com to it.</p>
        <p>Lume is a joy to work with. The built-in functionality and plugins fill 95% of my use cases – very
        little custom code needed. And <em>if</em> I don't understand the documentation, reading the source code is
        no problem.</p>
        <p>It <em>feels</em> easier to use than other generators I've tried (Jekyll, Middleman, Metalsmith, Eleventy)
        but yet very powerful. During the porting my code I was not too annoyed during the process:
        something that you easily get when trying a brand new site generator. The fact that its written in
        Typescript is <em>so</em> nice, as you get static typing and don't have to guess what objects and
        properties to read.</p>
        <p>Try it out!</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 19 Jan 2022 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Customising an iOS home screen web app in 2021</title>
      <link>https://johan.im/writings/ios-homescreen-web-app/</link>
      <guid isPermaLink="false">https://johan.im/writings/ios-homescreen-web-app/</guid>
      <description>Developing a mobile web app for iOS is tricky, since with new iOS releases, features are being added and removed, and new bugs appear. In this post, I walk through what worked for me and my simple app in iOS 15 (in 2021).</description>
      <content:encoded>
        <![CDATA[<h2>Background</h2>
        <p>During parental leave, I've started to run. Not away from the baby, for heaven's sakes, but regular
        exercise running. I really prioritised keeping it super straight-forward: I refuse wear any kind of
        wearable, such an Apple Watch or Garmin in order to track heart rate and so on (I won't go into why
        here, I just don't need another tech device). But. Even I see the need for tracking basic stats,
        like duration, length of run, and average speed. Those are literally the three things I need.</p>
        <p>Let's see what running apps there are! <em>Opens up App Store.</em> &quot;Strava, yes I've heard about that one.
        Runkeeper… that one I've used before! ( = a lifetime ago)&quot;. I installed Strava because it was at the
        top, and hell begins. It prompts me for an account, which is fair enough I guess, but it still put
        me off a bit. It's also paid. Monthly subscription. And it shows nagging reminders to upgrade to a
        paid plan <em>everywhere</em>. And it has social features, which I of course don't need. It has so much
        <em>stuff</em> I neither need nor want! As a developer on leave, the only sane thing to do is to write my
        own running app.</p>
        <p>Since I'm not a Swift or Objective-C developer (and have no intentions of becoming one), I need to
        do it as a web app. Approximately 5 seconds after I decided to develop my own running tracker app I
        realise I really must ensure that this single API is available in the iOS browser: being able to
        <em>watch</em> the GPS position as it changes with the
        <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API">Geolocation API</a>. Thank god,
        <code>Geolocation.watchPosition()</code> exists, and a wave of relief is showering over me. That means I can
        watch the position, stash away the raw coordinates, and do things with them. Such as converting to
        <a href="https://geojson.org/">GeoJSON</a> in order to calculate the length in kilometers and drawing the route
        in an embedded map from Mapbox.</p>
        <ul>
        <li>You can try the final app here: <a href="https://runloop.pages.dev/">runloop.pages.dev</a>. Be sure to add it
        to your homescreen.</li>
        <li>The source code for my app is over <a href="https://github.com/johanbrook/runloop">at GitHub</a>.</li>
        </ul>
        <h2>Apple documentation feels out of date</h2>
        <p>I start out by going straight into the horse's mouth: the Apple documentation on (mobile) Safari.
        This should be the truth, and nothing but the truth! I head over to
        <a href="https://developer.apple.com/">developer.apple.com</a> and browse to some &quot;Technologies&quot; page where one
        can input a &quot;technology&quot;. I put in
        <a href="https://developer.apple.com/documentation/technologies?tags=Safari">&quot;safari&quot;</a>. The search results
        only yield things that are interesting from a native app perspective, such as embedding web views.</p>
        <p>Okay. I scroll around to the footer, and see
        <a href="https://developer.apple.com/safari/">&quot;Safari and the web&quot;</a>. Score! These are the only interesting
        links:</p>
        <p><img src="https://johan.im/assets/posts/apple-docs-safari.png" alt="Apple docs"></p>
        <p>Clicking that &quot;More&quot; link leads me to the
        <a href="https://developer.apple.com/library/archive/navigation/index.html?filter=safari">&quot;Documentation Archive&quot;</a>.
        That sounds nice. Latest change as of writing is in June 2018. Gulp.</p>
        <p>Unless I'm missing something, there's no official Apple documentation on iOS Safari. Except for
        browsing through blog posts over at <a href="https://webkit.org/">WebKit.org</a> and other release notes. Note
        that I'm talking about proprietary Safari tech – not regular Web APIs you'd find over at MDN.</p>
        <p>My next bet was simply googling around on problems as I encountered them.</p>
        <h2>How to make a web app behave and look nicely on iOS 15 in 2021</h2>
        <p>What follows is a stream of things I encountered while researching how to make a super slick iOS web
        app in 2021. My phone is an iPhone 12 mini, and I'm using iOS 15.2 at the time of writing this post.</p>
        <h3>Adding to home screen – don't forget the icon</h3>
        <p>I knew from before that adding a web page to the iOS home screen grants it special privileges. Like
        not
        <a href="https://webkit.org/blog/10218/full-third-party-cookie-blocking-and-more/">wiping LocalStorage after just 7 days</a>.
        Also, there's the UX aspect, which is important: adding to the home screen removes the Safari chrome
        (UI) and runs the web app in a frameless mode. This is nice.</p>
        <p>This hasn't changed since last time I looked, thank god. The option is still there in the Safari UI.
        It'll add use the <code>&lt;title&gt;</code> from your web page as the app title. You need to supply an icon yourself
        (iOS will pick a fugly screenshot of your app otherwise).</p>
        <p>Put this in your <code>&lt;head&gt;</code>:</p>
        <pre><code class="language-html">&lt;link rel=&quot;apple-touch-icon&quot; href=&quot;apple-touch-icon.png&quot;&gt;
        </code></pre>
        <p>where the <code>href</code> attribute points to a PNG image with the icon file.</p>
        <p>Refer to
        <a href="https://developer.apple.com/design/human-interface-guidelines/ios/icons-and-images/app-icon/">Apple's official guide on icons</a>
        for sizes, since you can control which icon file that goes with which size, like this:</p>
        <pre><code class="language-html">&lt;link rel=&quot;apple-touch-icon&quot; sizes=&quot;152x152&quot; href=&quot;touch-icon-ipad.png&quot;&gt;
        </code></pre>
        <h3>Viewport settings</h3>
        <p>The single most important thing you'd want to do is to set the viewport width to the width of the
        device. This is old school, but important:</p>
        <pre><code class="language-html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt;
        </code></pre>
        <p>If you feel like disabling the pinch-to-zoom behaviour of web pages, tack on an <code>user-scalable=no</code>:</p>
        <pre><code class="language-html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0, user-scalable=no&quot; /&gt;
        </code></pre>
        <p>For me, I wanted more native feel, so I disabled zoom. Even though it's a bit user hostile. But the
        user in this case is me, so I don't care.</p>
        <h3>Frameless mode and <code>manifest.json</code></h3>
        <p>The next most important thing is to tell iOS that we'd like to run the web app in &quot;frameless mode&quot;,
        or &quot;without the browser chrome&quot;. Otherwise your home screen web app icon only leads to a web page,
        and thus merely becomes a shortcut. We want it to feel like an app!</p>
        <pre><code class="language-html">&lt;meta name=&quot;apple-mobile-web-app-capable&quot; content=&quot;yes&quot; /&gt;
        </code></pre>
        <p>This still is the way to tell iOS to hide the address bar and all that.</p>
        <p>But. When I clicked around on internal links in my app, I saw the browser chrome appear for every
        link click! It would suck if Apple had crippled mobile web apps in this way, but I wasn't too
        surprised after all – this is Apple.</p>
        <p>I started reading about
        <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest">&quot;Web app manifests&quot;</a>. Those manifests is a
        JSON file which tells the browser more things when it runs the app in &quot;PWA&quot; (Progressive Web App)
        mode. I's mainly about customising presentation, such as titles, icons, splash screens, etc. So I
        sort of wrote it off at first, and also thought Apple wouldn't care about these kinds of valiant
        efforts by the web community.</p>
        <p>But I was wrong. I stuck a simple <code>manifest.json</code> in my root directory and linked it from my HTML:</p>
        <pre><code class="language-html">&lt;link rel=&quot;manifest&quot; href=&quot;/manifest.json&quot; /&gt;
        </code></pre>
        <pre><code class="language-json">{
        &quot;name&quot;: &quot;Runloop&quot;,
        &quot;scope&quot;: &quot;/&quot;,
        &quot;display&quot;: &quot;standalone&quot;
        }
        </code></pre>
        <p>I'm not sure whether it was the <code>scope</code> or <code>display</code> parameter that made the internal links work
        without chrome again, but this did the trick! iOS Safari <em>is</em> parsing this file after all. And I
        have no idea why the <code>apple-mobile-web-app-capable</code> tag won't cut it, but oh well. This feels like
        an extra guard to <em>really</em> tell the system that my app is running standalone without any browser
        chrome (&quot;please&quot;).</p>
        <h3>Using the whole screen on iPhone models with notches</h3>
        <p>My iPhone 12 mini has a notch, and is thus not a perfect rectangular display. We can tell the web
        app to use the whole display with this:</p>
        <pre><code class="language-html">&lt;meta name='viewport' content='initial-scale=1, viewport-fit=cover' /&gt;
        </code></pre>
        <p>That is, adding <code>viewport-fit=cover</code> to the <code>viewport</code> meta tag. Otherwise, Safari will play it safe
        and make sure your app lives within a rectangular area far away from the notch.</p>
        <p>Apple is kind and provides tech for us in order to avoid colliding with the notch and the virtual
        home button at the bottom of the iPhone screen.
        <a href="https://webkit.org/blog/7929/designing-websites-for-iphone-x/">I recommend reading this article</a>.</p>
        <p>Basically, we've got four <code>env()</code> values to use:</p>
        <pre><code class="language-css">env(safe-area-inset-top)
        env(safe-area-inset-bottom)
        env(safe-area-inset-left)
        env(safe-area-inset-right)
        </code></pre>
        <p><code>env()</code> works where <code>var()</code> works – even inside <code>calc()</code>, which is nice. For instance, this is the
        styling for my bottom <code>NavBar</code> component:</p>
        <pre><code class="language-css">.NavBar {
        padding: var(--inset);
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        padding-bottom: calc(env(safe-area-inset-bottom) + 10px);
        padding-left: max(env(safe-area-inset-left), var(--inset));
        padding-right: max(env(safe-area-inset-right), var(--inset));
        }
        </code></pre>
        <p><code>--inset</code> is set on <code>:root</code>, and is the &quot;global padding&quot; in my app. As you can see, I use it with
        the <code>max()</code> function to make the left and right padding be whatever's the max value of the safe area
        and my inset.</p>
        <h3>Styling taps on links and buttons</h3>
        <p>Since the arrival of the first iOS (&quot;iPhone OS&quot;?), it's been tricky to style taps on interactive
        elements. Such as a different background on a button when you tap it. <code>:active</code> and <code>:hover</code> pseudo
        selectors are both weird and strangely enough don't manage to produce that native feel.</p>
        <p>In 2021, turns your all you have to is adding a single no-op touch listener, and then you can use
        <code>:active</code> as it's intended to:</p>
        <pre><code class="language-js">// Adding an empty touch listener will make :active CSS pseudo selector
        // work in order to style taps on elements. Joy.
        document.addEventListener('touchstart', (evt) =&gt; {});
        </code></pre>
        <p>Insert that snippet somewhere in your JS, and off you go.</p>
        <h3>Making the app be 100% height and don't show scrollbars</h3>
        <p>You thought this was the kind of stuff you'd stop put up with in 2021? Think again. <code>100vh</code> won't do
        what you think it does, and Apple devs think it works &quot;as intended&quot;.
        <a href="https://chanind.github.io/javascript/2019/09/28/avoid-100vh-on-mobile-web.html">Read more here</a> for
        a demonstration. I almost can't muster strength to explain it all, but the gist of it is that the
        browser chrome in mobile Safari is dynamic in height and take up space. This affects the <code>vh</code> unit
        and produces overflow.</p>
        <p><a href="https://www.bram.us/2021/07/08/the-large-small-and-dynamic-viewports/">Dynamic viewports</a> will fix
        this. But until then, I went with a boring Javascript fix:</p>
        <pre><code class="language-ts">let lastHeight: number | null = null;
        
        const setAppHeight = debounce(() =&gt; {
        const doc = document.documentElement;
        const height = window.innerHeight;
        
        if (height != lastHeight) {
        doc.style.setProperty('--app-height', `${height - MAGIC_NUMBER}px`);
        lastHeight = height;
        }
        }, 100);
        
        // This is the magic offset which one can subtract in order to hide scrollbars
        // AT LEAST ON MY PHONE. YMMV.
        const MAGIC_NUMBER = 3;
        
        /** This is solving the STILL outstanding problem of using
        * height: 100vh on Mobile Safari. The problem is outlined here:
        * https://chanind.github.io/javascript/2019/09/28/avoid-100vh-on-mobile-web.html
        *
        * Instead, we control the height of a CSS variable which is mirroring
        * the window.innerHeight property.
        */
        const fixMobileHeight = () =&gt; {
        window.addEventListener('resize', setAppHeight);
        
        setAppHeight();
        
        return () =&gt; window.removeEventListener('resize', setAppHeight);
        };
        
        // Util
        const debounce = (func: (...args: unknown[]) =&gt; unknown, wait: number) =&gt; {
        let timeout: NodeJS.Timeout;
        
        return (...args: unknown[]) =&gt; {
        const later = () =&gt; {
        clearTimeout(timeout);
        func(...args);
        };
        
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        };
        };
        
        fixMobileHeight();
        </code></pre>
        <pre><code class="language-css">#app {
        min-height: var(--app-height);
        }
        </code></pre>
        <p>We use the <code>resize</code> event which fires on <code>window</code> to set a CSS variable, which we can use in our
        stylesheet. It has some guards so that we won't fire it too often.</p>
        <h3>Dark mode</h3>
        <p>Don't forget enabling dark mode so Safari can style native elements:</p>
        <pre><code class="language-css">:root {
        color-scheme: light dark;
        }
        </code></pre>
        <p>This is controllable from a tag within <code>&lt;head&gt;</code> too (which I guess is faster since the browser
        doesn't have to download and parse the CSS to decide).</p>
        <h3>Theme colours</h3>
        <p>This is new, and very marketed by Apple dev evangelists: the possibility to set the &quot;theme colour&quot;,
        which makes Safari use a configured colour of your choice in the browser chrome. Safari is trying to
        be smart, and defaults to the <code>background-color</code> on your <code>html</code> or <code>body</code> elements, but sometimes
        you need to set it on your own:</p>
        <pre><code class="language-html">&lt;meta name=&quot;theme-color&quot; content=&quot;#fff&quot; media=&quot;(prefers-color-scheme: light)&quot; /&gt;
        &lt;meta name=&quot;theme-color&quot; content=&quot;#000&quot; media=&quot;(prefers-color-scheme: dark)&quot; /&gt;
        </code></pre>
        <h3>System colours</h3>
        <p>Speaking of colours: dark mode isn't cool, you know what's cool? System colours (that joke fell…). I
        stumbled upon this blog post:
        <a href="https://blog.jim-nielsen.com/2021/css-system-colors/">&quot;CSS System Colors&quot;</a>. The author emphasised
        not hard coding any colours for light and dark modes. Instead, he lets the system decide from
        sensible defaults. For a website or app without need for any special branding, this is probably what
        you want.</p>
        <p>But what do you do when you actually want to <em>use</em> one of these system colours elsewhere in your
        CSS? That's the core question in the linked blog post, I'll let you read it.</p>
        <p><em>tldr</em>: there are &quot;system colors&quot; defined in the
        <a href="https://drafts.csswg.org/css-color/#css-system-colors">CSS spec</a>, which you can use like any other
        colour:</p>
        <pre><code class="language-css">.dropdown {
        background-color: Canvas;
        }
        </code></pre>
        <p>Of course, there's a bug (?) in iOS, so <code>Canvas</code> backgrounds don't work properly. The blog post
        suggests using the <code>-apple-system-control-background</code> value as a hack, and it works. Copied from the
        post:</p>
        <pre><code class="language-css">/* Defaults/fallbacks for 1) */
        :root {
        --color-bg: #fff;
        --color-text: #222;
        }
        
        /* 1) For browsers that don’t support `color-scheme` and therefore
        don't handle system dark mode for you automatically
        (Firefox), handle it for them. */
        @supports not (color-scheme: light dark) {
        html {
        background: var(--color-bg);
        color: var(--color-text);
        }
        }
        
        /* 2) For browsers that support automatic dark/light mode
        As well as system colors, set those */
        @supports (color-scheme: light dark) and (background-color: Canvas) and (color: CanvasText) {
        :root {
        --color-bg: Canvas;
        --color-text: CanvasText;
        }
        }
        
        /* 3) For Safari on iOS. Hacky, but it works. */
        @supports (background-color: -apple-system-control-background) and (color: text) {
        :root {
        --color-bg: -apple-system-control-background;
        --color-text: text;
        }
        }
        
        html {
        background-color: var(--color-bg);
        color: var(--color-text);
        }
        </code></pre>
        <p>This worked for me. Now I can use <code>--color-bg</code> wherever I want to use the (dynamic, non hard coded)
        background colour.</p>
        <h3>Disabling selecting text</h3>
        <p>This also goes in the &quot;user hostile&quot; department. Use are your own discretion:</p>
        <pre><code class="language-css">html {
        -webkit-tap-highlight-color: transparent;
        -webkit-user-select: none;
        user-select: none;
        }
        </code></pre>
        <h3>Use an iOS-y font stack</h3>
        <p>I went with this, to get the SF font:</p>
        <pre><code class="language-css">font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell',
        'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        </code></pre>
        <h2>Conclusion</h2>
        <p>After all these fixes, my app finally felt pretty good to use on an iPhone. It looked gorgeous in
        dark mode, the typography was great, it felt snappy navigating around, and not like a wEbSiTe at
        all.</p>
        <p>I'm most impressed over how easy it is to make the <em>styling</em> look nice. Before iOS 7, when we were
        in skeumorphism land, it was a pain to make web apps blend into the system. Now it's just some
        typography, spacing, and default colours, and we've come a long way. If you just &quot;know&quot; how a
        typical iOS app looks like – with list views, headings and so on – I bet you'll get something that
        looks decent in no time thanks to the CSS snippets I've posted throughout the text.</p>
        <p>I was most surprised over the show-chrome-on-link-tap thing in the home screen app. I had no idea
        one needed to use a Webmanifest JSON file to get rid of that. I've found <em>very little</em> documentation
        on iOS' use of the web manifest file too.</p>
        <h3>Nice Web APIs</h3>
        <p>Overall, Web APIs have gone a long way with I/O: we can now upload, download, and <em>share</em> files in
        iOS. I built and export and import feature to try this out, and it worked great on mobile:</p>
        <pre><code class="language-ts">const doImport = async (evt: Event) =&gt; {
        const { files } = evt.target as HTMLInputElement;
        
        const file = files[0];
        
        if (file.type != 'application/json') {
        alert('Only JSON files, please.');
        return;
        }
        
        try {
        const json = JSON.parse(await file.text());
        // do stuff with object
        } catch (ex) {
        console.error(ex);
        alert(`Failed to read &quot;${file.name}&quot;. Reason: ${ex}`);
        }
        };
        
        document.findElementById('import')!.addEventListener('change', doImport);
        </code></pre>
        <pre><code class="language-html">&lt;input type=&quot;file&quot; id=&quot;import&quot; accept=&quot;application/json&quot; /&gt;
        </code></pre>
        <p>Exporting works good with the
        <a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/share">Share API</a>:</p>
        <pre><code class="language-ts">const doExport = async () =&gt; {
        try {
        // Will show native iOS share pane
        await navigator.share({
        title: 'Run data as JSON',
        files: [fileOf(appConf)],
        });
        } catch (ex) {
        if ((ex as DOMException).name == 'AbortError') return;
        alert(`Sharing failed. Reason: ${(ex as Error).message || ex}`);
        console.error(ex);
        }
        };
        
        const fileOf = (data: unknown): File =&gt;
        new File([JSON.stringify(appConf, null, 4)], 'runloop.json', {
        type: 'application/json',
        });
        </code></pre>
        <p>The user now gets the choice of saving the file somewhere, or sending it with the native UI
        controls.</p>
        <h2>Epilogue</h2>
        <p>The irony is that my running tracker app didn't work <em>at all</em> out in the wild… Turns out that the
        system turns off any background geolocation services when the screen is locked – which totally is
        the case when I'm running. And there's no Geolocation in Service Workers or similar background magic
        place. Argh.</p>
        <p>See it in action here: <a href="https://runloop.pages.dev/">runloop.pages.dev</a>.</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 14 Dec 2021 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>An Even Better Spaghetti Bolognese</title>
      <link>https://johan.im/writings/better-spaghetti-bolognese/</link>
      <guid isPermaLink="false">https://johan.im/writings/better-spaghetti-bolognese/</guid>
      <description>A recipe for a spaghetti bolognese (or ragú) which is tastier than an earlier version I published – and simpler!</description>
      <content:encoded>
        <![CDATA[<p>This is a continuation (sequel? remix?) on the post
        <a href="https://johan.im/writings/my-spaghetti-bolognese">&quot;My Spaghetti Bolognese&quot;</a>. In that one, I wrote about a spaghetti
        bolognese recipe which I thought I'd, pretentious as I am, perfected over the years.</p>
        <p>We recently spent a month in Florence, Italy, where we stayed with a host family. For one birthday
        party for their grandchild, the family father had made a ragú sauce served with penne pasta. The
        sauce was amazing: rich, juicy, and smooth. I asked for the recipe, and will present it in this
        post.</p>
        <h2>The ingredients</h2>
        <ul>
        <li>1-2 finely chopped garlic cloves.</li>
        <li>500g of minced pork and beef meat.</li>
        <li>1-2 celeries.</li>
        <li>1-2 carrots.</li>
        <li>1 onion (preferrably red).</li>
        <li>750g passata (tomato sauce). I ended up adding 1200g of passata since I wanted a saucier feeling.</li>
        <li>1 glass red wine.</li>
        <li>Sugar (optional).</li>
        <li>Meat broth (optional).</li>
        <li>Plenty of olive oil.</li>
        <li>Salt and pepper.</li>
        </ul>
        <p>For the celery, carrot, and onion: the individual units aren't as important as the ratio between
        them. The recipe I received said: &quot;The same amount of celery and onion, a little less carrot&quot;.</p>
        <p>The amount of olive oil is something one needs to freewheel. I usually go with covering the whole
        pot with almost one centimeter of oil (depending on the size of pot, of course). There's a lot of
        fat coming from the pork part in the meat, so beware: <em>that</em> much oil might not be required.</p>
        <h2>The steps</h2>
        <ol>
        <li>Fry the garlic in a pot or deep pan with plenty of olive oil. Garlic should be added when the oil
        is hot.</li>
        <li>Add the meat, and brown it well.</li>
        <li>When the meat is well cooked, add a finely chopped mixture of celery, carrots, and onion.</li>
        <li>When the mixture is cooked, add the passata. Add salt to taste, as well as some ground pepper.</li>
        <li>Wait for the sauce to boil, and add a glass of wine. Wait for it to evaporate completely.</li>
        <li>Cook over very low heat for at least 30 minutes. If the sauce is too acidic, add a teaspoon of
        sugar. If it's too dry, add a little meat broth.</li>
        </ol>
        <p>(I've never needed meat broth in this recipe. There's just no way I've managed to get it too dry.)</p>
        <p>You can let it sit on the stove without a lid for a couple of hours if you'd like. Or put it on very
        low heat in the oven (around 100 degrees celsius in my convection oven seemed fine over 5 hours of
        cooking). I'm not actually sure what the benefits with the oven are – perhaps the sauce becomes
        different if you heat it from all directions? Who knows.</p>
        <p>When serving with pasta, don't forget to add around a deciliter of pasta water to the sauce at the
        end. It &quot;really ties the sauce together&quot;, as they say. Parmesan or pecorino is nice to offer too.</p>
        <p><strong>Done.</strong></p>
        <h2>Differences from the other recipe</h2>
        <ul>
        <li>50/50 pork and beef instead of 100% beef. The 50/50 mix makes for a more fatty and tasty sauce,
        thanks to the pork.</li>
        <li>Cooking the onion, carrots, and celery in the meat instead of sautéing them. This felt kind of
        weird to me first, since <em>all</em> recipes I read say that you should fry the onion, garlic, carrot,
        and celery in the pot before adding the meat. I'm not sure about the difference.s</li>
        <li>Use of more olive oil.</li>
        <li>Use of meat broth (if needed).</li>
        </ul>
        <p>This recipe felt simpler but still as good too, which I think should be the goal in cooking. The
        other recipe has ten steps, this one only has six steps.</p>
        ]]>
      </content:encoded>
      <pubDate>Tue, 02 Nov 2021 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Recently in books II</title>
      <link>https://johan.im/writings/recently-in-books-ii/</link>
      <guid isPermaLink="false">https://johan.im/writings/recently-in-books-ii/</guid>
      <description>Thoughts on the books Ishmael, Cosa Nostra, Godfather, Herakles, Normal People, About A Boy, and Jag Kan Ha Fel.</description>
      <content:encoded>
        <![CDATA[<p>This is a long overdue post on some books I've read since the
        <a href="https://johan.im/writings/recently-in-books">last update</a>.</p>
        <h2>&quot;Ishmael&quot; by Daniel Quinn</h2>
        <p>My father in law borrowed me this one, not without a glimpse in his eye. It's hard to describe this
        novel. It's not what it seems to be in the first few pages, which is about a man who starts talking
        with a gorilla via telepathy. The bulk of the novel is the philosophical conversation between the
        odd couple, where the gorilla acts as the teacher for the man, who acts as narrator.</p>
        <p>My immediate thoughts about this book are these:</p>
        <ol>
        <li>It's <em>really</em> &quot;on topic&quot; right now (year 2020).</li>
        <li>It's eye opening, challenging, provoking, and story telling.</li>
        </ol>
        <p>For the first point: one of the book's core themes is around planet Earth – the environment and how
        we humans are ruining it. Whereas other books in the climate genre is a lot of numbers and <em>facts</em>,
        &quot;Ishmael&quot; tells a different, more philosophical, story.</p>
        <p>The second point: the book does exactly what (I think) a philosophical novel should do. It taught me
        things and how to see myself, my culture, and whole of humanity and its history in a different
        light. I knew already that our modern culture – capitalist and infinte-growth aspiring – isn't
        viable and sustainable. &quot;Ishmael&quot; confirms those thoughts by anchoring them in a spiritual and
        cultural arguments, using terms as <em>Myths, Stories, and Cultures</em>.</p>
        <p>The book affected me in the sense of reiterating that <em>Balance is everything</em>. Humans have messed up
        that ecological balance in nature, by telling ourselves we're <em>above</em> the laws of nature, and that
        we possess the power of deciding over &quot;who's to die, and who's to survive&quot;.</p>
        <p>If you can bare with the kind of long introductory part, I'd really recommend getting through it.
        Pair it up with the popular science piece &quot;Sapiens&quot; for a full picture.</p>
        <h2>&quot;Cosa Nostra&quot; by John Dickie</h2>
        <p>A non-fiction book about the Sicilian mafia - the Cosa Nostra.</p>
        <p>I had a real &quot;mobster Spring&quot; where I went through a couple of mafia movies and books (this and the
        next one I write about below). Am I getting this old already?! I like good non-fiction books, and
        this one was good. It's essentially about how the mafia grew from local gangs in Sicily in the
        1800s, into a loose but worldwide organisation in the 1900s.</p>
        <p>It's a fascinating read if you're that kind of person. Note that the author focuses mostly on the
        Sicilian mafia, and not the American offspring that was born in the early 1900s. Perfect vacation
        paperback read, I'd say.</p>
        <h2>&quot;The Godfather&quot; by Mario Puzo</h2>
        <p>Here we go. The absolute number one piece of mafia literature.</p>
        <p>I've seen the movie(s) countless of times, but still enjoyed the book <em>a lot</em>. That's because Puzo's
        language and skill in writing a captivating plot is outstanding. Everything is intense: the
        dialogue, the characters, the situations.</p>
        <p>It, naturally, does a better job telling the backstories of the characters of the Corleone crime
        family than the movies. I'm usually a sucker for the fates of &quot;anti heroes&quot;, such as Michael
        Corleone: about their early innocence, ascent to something they did not anticipate, and final fall
        from their throne (this is not pictured in &quot;The Godfather&quot;).</p>
        <p>In the end, what fascinates me with Puzo's work is his way of creating emotional bonds between the
        reader and the characters (while you <em>know</em> they're bad!) but in an ice cold way describe horrible
        fates and acts.</p>
        <h2>&quot;Herakles&quot; by Theodor Kallifatides</h2>
        <p>The author is born in Greece but now lives and works in Sweden. The book is a fiction novel about
        the Greek hero Hercules (&quot;Herakles&quot; in Swedish). I think everybody knows the core story, from the
        Disney movie or from the origin myth, in one way or another. This book is more detailed, dramatised
        version of the original story about the hero's adventures.</p>
        <p>I've always loved reading about religion and myths. I recall revisiting a factbook about Greek
        mythology my parents had when I was little, so all the names are stuck with me.</p>
        <p>The book focuses on Hercules' birth, upbringing, adventures, and death – an all the sorrow and
        tragedies therein. Greek mythology is full of tragedy! So when you read about our hero, there are a
        couple of moments of &quot;Goddammit Hercules, now you <em>really</em> screwed up!&quot;. And he screwed up <em>a lot</em>.</p>
        <p>I liked the personal tone the author writes in. The style is modern but serious. Howver, it still
        contains that sterile prose in the way that these old myths should be told in. &quot;Oh, Hercules beat
        somebody to death with his bare hands. No big deal, carry on&quot;. But &quot;Herakles&quot; manages to go beyond
        the regular death and violence in the myth, and add some everyday empathy for our hero. And that, I
        appreciate: some nuance.</p>
        <p>In the end, it's a good story.</p>
        <h2>&quot;Normal People&quot; by Sally Rooney</h2>
        <p>A book praised by critics, winner of great awards, made into television series. &quot;Normal People&quot; is
        about a guy (Connell) and a girl (Marianne) in a high school in Ireland. They develop a non-trivial
        romantic and physical relationship, and we get to follow them over the years they're together and
        apart.</p>
        <p>I like the very boiled down stories in these kinds of plots. The variations are usually infinite,
        and the quality of the work is determined by the prose and flow in the text. Sally Rooney writes
        wonderfully. The core plot of &quot;boy and girl like each other but it's complicated&quot; is taken care of
        very delicately. As mentioned, everything is very boiled down, and the text follows both Connell and
        Marianne in their thoughts. The pacing is good, as a new chapter might bring a jump over a few years
        in their lives.</p>
        <p>The author manages to capture That Feeling that occurs in romantic relationships in the ages 18-30.
        On the inside, you're ready to explode by a broken heart, but on the outside it's &quot;Oh god, why do
        you kids make it so complated?! Just talk to her/him!&quot;. Stuff in &quot;Normal People&quot; <em>is</em> complicated.
        Rooney brings that forward, drags it out, and makes sure that the characters themselves don't know
        what they want over the course of the novel.</p>
        <p>There's also darkness in the shapes of abusive relationships, tragic family history, social class
        issues, depression, jealousy, drugs, and alcohol. The whole buffet of adolescent troubles, that is.
        The text treats these subjects in a very cold and objective manner. They are slowly appearing
        throughout the storyline, like bad mold spots in a cheese.</p>
        <p>I enjoyed this book. It doesn't bring anything new to the table, but it doesn't have to. The prose
        and the strong characters in Connell and Marianne do enough.</p>
        <p>(I actually watched the TV series before reading the book, and the former does a pretty good job
        capturing the bleakness and desperation from the book. The acting and camera in the series are
        terrific.)</p>
        <h2>&quot;About A Boy&quot; by Nick Hornby</h2>
        <p>I think most people have seen the film, but now I got around reading the book.</p>
        <p>It's good. It's fun. It'll entertain you for some days. It's got darkness coupled with absurdity,
        all tied together in weird conversations and thought patterns of the main characters. The
        Britishisms in Nick Hornby's language are everywhere.</p>
        <p>I don't think I have anything more to say.</p>
        <p>(Hugh Grant literally <em>is</em> Will Freeman to me.)</p>
        <h2>&quot;Jag Kan Ha Fel&quot; by Björn Natthiko Lindeblad</h2>
        <p>(This is a Swedish book 🇸🇪.)</p>
        <p>Björn dropped out of a brilliant career in economics in his mid-twenties and became a Buddhist monk
        in the jungles of Thailand. He stayed a monk for 17 years. This book is about his time as a monk,
        and what happened afterwards. Like raisins in the cake, he mixes in quotes, conversations, and
        thoughts from himself and Buddhist friends. To be honest, I came for &quot;the wisdom&quot;, but was touched
        by the author's story.</p>
        <p>Björn received some help in writing the book, and the text is very tender, personal, and humorous.
        Björn has a lot of humour! This is also my first real look into a Buddhist monastery environment,
        and it's very enlightening (pun intended). Björn's story gave me a human insight into the Buddhist
        monk lifestyle and daily life. He attended both Western and Thai monasteries while in Thailand, and
        later moved to British and Swiss monasteries. It was really interesting to hear about the mix of
        different people in the Thai monasteries: they are very diverse. Both culture wise, but also in
        personalities, as some people really aren't doing the hardcore, stereotypical monk thing. They're
        just there because they had nothing else to do.</p>
        <p>The story is also personal, as it describes how Björn and his family dealt with the passing of his
        dad (by euthanasia). It continues with Björn finding love, and ultimately about his own fate in
        getting the diagnose of the ALS disease.</p>
        <p>Everything in this book is <em>so</em> human. It touches upon a lot of stages in life, and thanks to that
        concerns us all. Like a universal book in a very light hearted but well put language. The author
        isn't out for doing some self-help Buddhist thing aimed at Western readers. It's his own life where
        he shares his thoughts, fears, and experiences. It is what it is.</p>
        <p>(For Swedes, I recommend <a href="https://sverigesradio.se/avsnitt/1518766">Björn's talk in &quot;P1 Sommar&quot;</a>
        from June, 2020.)</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 31 Dec 2020 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Building a small, functional reactive app architecture</title>
      <link>https://johan.im/writings/frp-app-arch/</link>
      <guid isPermaLink="false">https://johan.im/writings/frp-app-arch/</guid>
      <description>A long-ish read on how to build a web frontend with reactive functional streams (in Typescript!). We&apos;ll go through how we at Lookback extracted a library from patterns in our frontend, inspired by the library CycleJS.</description>
      <content:encoded>
        <![CDATA[<p>At <a href="https://lookback.io/">Lookback</a>, we've fallen in love with functional reactive programming (FRP)
        with streams in our frontend apps. Together with the use of Typescript for compile time type safety,
        we've seen a tremendous bump in overall stability and fewer runtime bugs. Actually, I dare to say
        that <em>all</em> of our bugs so far have been either logic (programmer) or timing errors.</p>
        <h2>What this text is and what it's not</h2>
        <p>We'll look at how <em>easy</em> it actually is to build these kind of frontend architectures on your own.
        This architecture is, to be clear, <em>not</em> any new or novel idea at all. As you will read below, it's
        essentially a rip-off of a library called CycleJS, but less general and made to work with React as a
        view before CycleJS had proper React support.</p>
        <p>What we'll go through is how one can reason about state, side effects, and drawing the view with the
        data structure streams. In the end, we have the complete library.</p>
        <p><strong>I'll assume knowledge about streams in this post.</strong> With &quot;streams&quot;, I don't mean the
        <a href="https://nodejs.org/api/stream.html">NodeJS Stream API</a>, but the functional streams popularised by
        libraries such as RxJS, BaconJS, and xstream. The xstream library will be used for reactive streams,
        but the concepts are applicable to any streams implementation with the basic operations. I will also
        use Typescript features to model the architecture.</p>
        <p>An architecture based on functional reactive stream isn't for all frontend apps. Vanilla React
        paired with the Context API a reducer is probably fine in most cases. We use FRP in our Live player,
        and in our Chrome extension. Both codebases need to handle the complexities of multi-peer
        audio/video streaming, fetching data from a GraphQL API, client state, server state, connection
        problems, interrupts, problems with the mic and camera, subscribing to server data. Even with
        Typescript, I wouldn't want to model that in a Flux based React application. FRP has helped us
        handle the data flows in a concise manner across the app, with the help from cozy declarative
        constructs as <code>map</code>, <code>filter</code>, and so on. It's pretentious to say, but I almost feel &quot;the code
        writes itself&quot; when building out the streams for the data flows.</p>
        <h2>The code</h2>
        <p><strong>This is not some kind of new framework.</strong> Many others already exist. The repository linked below
        is solely for demonstration, and to hold the final code:</p>
        <p class="tc">
        <a href="https://github.com/lookback/frap" class="btn">✨ lookback/frap on GitHub</a>
        </p>
        <ul>
        <li><em>frap</em> is for <strong>F</strong>unctional <strong>R</strong>eactive <strong>Ap</strong>plication.</li>
        <li>🔨 ~20 Kb minified.</li>
        <li>📉 Has a single dependency (the <code>xstream</code> library).</li>
        <li>🏄‍♂️ The core API consists of two functions.</li>
        <li>🤝 Agnostic about the view, but assumes a stream based application.</li>
        </ul>
        <h2>Why?</h2>
        <p>For me personally, it was all about the joy of constructing an architecture I could understand the
        smallest parts of, and then extracting it to make it general.</p>
        <p>It also felt good not using a 3rd party package, except for <code>xstream</code>, to solve a thing.</p>
        <h2>Credits</h2>
        <p>The main brain behind the architecture is my colleague <a href="https://twitter.com/algstn">Martin</a>. He was
        the drive behind the functional patterns as we pair programmed to build the architecture for
        Lookback's Live player. The extraction and generalisation was made by me. As mentioned, the
        extraction and this post serves as a learning experience for myself too.</p>
        <h2>Background</h2>
        <p>We do make use of <a href="https://cycle.js.org/">CycleJS</a> in one of our web clients. CycleJS introduced the
        concept of cyclical streams and <em>drivers</em> for side effects for us. Go ahead and read about all its
        features on the website. It was a bit daunting for me in the beginning to &quot;think in cyclical
        streams&quot;, but a few months in I'm happier than ever building a single page client app.</p>
        <p>I recommend reading these texts on streams and reactive programming:</p>
        <ul>
        <li><a href="https://cycle.js.org/streams.html">&quot;Streams&quot; on CycleJS.org</a></li>
        <li><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754">&quot;The introduction to Reactive Programming you've been missing&quot;</a>
        by André Staltz, creator of xstream and CycleJS.</li>
        <li><a href="https://futureofcoding.org/papers/comprehensible-frp/comprehensible-frp.pdf">&quot;Explicitly Comprehensible Functional Reactive Programming (pdf)&quot;</a></li>
        </ul>
        <p>Have a look at the CycleJS documentation and guides. Then let's see why we decided to <em>not</em> go with
        CycleJS for a new single page app.</p>
        <h3>Differences in drawing a DOM</h3>
        <p>Out-of-the-box, CycleJS uses <a href="https://github.com/snabbdom/snabbdom">Snabbdom</a> – a virtual DOM
        library – to build your app's HTML and insert into the browser. CycleJS supports
        <a href="https://cycle.js.org/components.html">components</a>, i.e. reusable functions that emit a DOM and take
        props.</p>
        <p>A component in CycleJS/Snabbdom might look like this:</p>
        <pre><code class="language-typescript">import xs from 'xstream';
        import { div, input, span } from '@cycle/dom';
        
        function MyComponent(sources) {
        // Incoming DOM from the outside:
        const domSource = sources.DOM;
        
        // Stream of new text values from our &lt;input&gt; element
        const newValue$ = domSource
        .select('.input') // The &lt;input&gt; has class=&quot;input&quot;
        .events('input') // Listen to `input` events
        .map((ev) =&gt; ev.target.value); // For each input, grab the `value`
        
        // Build a stream of state, which looks like:
        //  Stream&lt;{ value: string }&gt;
        const state$ = newValue$.map((value) =&gt; ({ value })).remember(); // Remember last value
        
        // Render out the UI from our state using Snabbdom. This is
        // a virtual DOM implementation, and we build the structure
        // using Hyperscript.
        const vdom$ = state$.map((state) =&gt;
        div([
        span(state.value),
        input('.input', {
        attrs: { type: 'text' },
        }),
        ])
        );
        
        // Finally, return our DOM to the outside, along with the
        // values from our &lt;input&gt;
        return {
        DOM: vdom$,
        value: state$.map((state) =&gt; state.value),
        };
        }
        </code></pre>
        <p>The DOM flows through the component as a <em>stream</em>. Compare this with a React component where you
        return the virtual DOM as a lump of JSX:</p>
        <pre><code class="language-tsx">import React, { useState } from 'react';
        
        function MyComponent() {
        const [text, setText] = useState&lt;string&gt;('');
        
        return (
        &lt;div&gt;
        &lt;span&gt;{text}&lt;/span&gt;
        &lt;input
        type='text'
        defaultValue={text}
        onInput={(evt) =&gt; setText(evt.target.value)}
        /&gt;
        &lt;/div&gt;
        );
        }
        </code></pre>
        <p>The React component <em>probably</em> looks more straight forward to most people than the CycleJS
        component, I imagine. It's because it's <em>imperative</em>. We use <code>setText</code> and perhaps <code>this.setState</code>
        in React components – a concept that doesn't exist in CycleJS's world. In CycleJS, something needs
        to &quot;pull&quot; the values through the streams through the component. Streams are, aptly, flowing through
        the whole app.</p>
        <h3>Building our own</h3>
        <p>I think the Snabbdom way of building markup is interesting. It encourages me to think about my
        frontend code as functions even more (JSX sort of hides that away). For a rewrite of our Live
        player, we decided we wanted to use React for the view, instead of doing full CycleJS/Snabbdom
        again. This was before <a href="https://github.com/cyclejs/react">@cycle/react</a> was released, so we set out
        to fully ditch CycleJS for this rewrite and figure out how to make business logic in streams play
        well with React for the view.</p>
        <p>The choice of React for the view was partly due to some odd quirks in how CycleJS handles DOM
        events, and partly due to the nice React ecosystem. Typescript and React go perfect together too,
        making for robust view components.</p>
        <p>In our new architecture, we wanted to keep these concepts from CycleJS:</p>
        <ul>
        <li>All business logic as reactive streams.</li>
        <li>Handling side effects in Drivers, making for a &quot;pure&quot; main application.</li>
        </ul>
        <p>We wanted to get rid of:</p>
        <ul>
        <li>Replace the DOM-as-a-stream and Snabbdom rendering with React.</li>
        </ul>
        <p>We also wanted to include:</p>
        <ul>
        <li>Storing the whole app state as a central atom and draw the whole user interface based on that. Of
        course very common in the React world these days.</li>
        </ul>
        <p>Let's begin!</p>
        <h2>Table of Contents</h2>
        <ol>
        <li>State &amp; data flow</li>
        <li>State updates</li>
        <li>Sending messages</li>
        <li>The view</li>
        <li>Side effects</li>
        </ol>
        <h2>State &amp; data flow</h2>
        <p>How to manage state in frontend applications has turned out to be a hot topic. What is app state
        anyway? It might be:</p>
        <ul>
        <li>An ID string of the currently signed in user.</li>
        <li>An array of blog posts.</li>
        <li>A boolean indicating if a modal is open or not.</li>
        <li>An enum for the current state in a state machine.</li>
        </ul>
        <p>And so on. The basic idea is that we should be able to <strong>draw the whole interface from this state</strong>.
        Sometimes, using local state in components is fine. This might be state such as the active tab in a
        tab system, which is very local, and <em>probably</em> doesn't concern any other parts of the system.</p>
        <p>Redux popularized the Flux architecture's idea of state as &quot;single source of truth&quot;. We shouldn't
        scatter the state across DOM nodes, localStorage, the server, and so on. Also Elm and Om are great
        inspiration for state handling in client side apps. I encourage you to read the
        <a href="https://redux.js.org/introduction/motivation">philosophies and principles of Redux</a>.</p>
        <p>A state atom might look like this:</p>
        <pre><code class="language-typescript">const state: State = {
        name: 'Johan Brook',
        showModal: true,
        };
        </code></pre>
        <p>From this, we should be able to draw the full app component tree. And if we'd draw it again from the
        same state, the app's UI can't change fundamentally.</p>
        <hr>
        <p>A core principle of functional programming is immutability – the inability to change a state after
        it's created. We'd like our app state to work the same. Meaning, we can't just &quot;set a property in
        the state&quot; like it's the Wild West. We need to update properties incrementally and generate a &quot;new&quot;
        state. For each of these state updates, the view should re-draw.</p>
        <p>In order to update the <code>name</code> in our state, we can design the flow like this:</p>
        <ol>
        <li>Construct your update to the state atom. In this case <code>{ name: 'John Doe' }</code>.</li>
        <li>Send the update as a stream to a function which folds it together with the state stream:</li>
        </ol>
        <pre><code class="language-typescript">const state$ = stateUpdate$.fold(
        (prev, update) =&gt; ({ ...prev, ...update }),
        startState,
        );
        </code></pre>
        <p>The xstream function <a href="http://staltz.github.io/xstream/#fold"><code>fold</code></a> is very handy to learn here.
        That's the amazing function which creates our whole incremental state! The update effectively
        extends the existing state object to form a new one.</p>
        <p>So we've got a <code>state$</code> variable containing the <em>stream of states</em>. It's very important to
        internalise that the &quot;stream of states&quot; here isn't a continuous stream, but a discrete one. It's a
        like a string with ants, where each ant is a new state, and they can come in irregular patterns. The
        idea is to let the view listen to this <code>state$</code> stream, which will behave like this:</p>
        <pre><code>stateUpdate$ = ---------- update: { name: 'Johnny Doe' }----
        
        stateUpdate$.fold(..., startState)
        
        state$ = ---{ name: 'Johan Brook' }--{ name: 'Johnny Doe' }-
        </code></pre>
        <p>For each new element in the resulting <code>state$</code> stream, we'll re-render the whole app (read more
        below about how we'll manage the view).</p>
        <p>So what are these state updates? It's ✨<strong>your application</strong> ✨! That's right: all business logic
        will either result in state updates or side effects (read more about that in the section about
        Drivers below).</p>
        <p>This can be expressed roughly like this (with xstream):</p>
        <pre><code class="language-typescript">import { Stream } from 'xstream';
        
        interface State {
        name: string;
        showModal: boolean;
        }
        
        // Our app just returns a new `name` instantly, but here
        // we would render our entire app as React components or similar.
        const app = (state$: Stream&lt;State&gt;) =&gt; {
        return state$.map((state) =&gt; ({
        name: 'Mary',
        }));
        };
        
        const run = (main: Main, startState: State) =&gt; {
        // Create an incrementally updated stream of state
        // XXX Fix stateUpdate$
        const state$ = stateUpdate$.fold(
        (prev, update) =&gt; ({ ...prev, ...update }),
        startState,
        );
        
        // Main app function, renders UI from state$ stream
        main(state$);
        };
        
        // Kick off! 🚀
        run(app, { name: 'Johan', showModal: false });
        </code></pre>
        <p>Sharp eyed readers notice that <code>stateUpdate$</code> is appearing out of nowhere. That's supposed to come
        from the app function, right?! Here's what the &quot;cyclical&quot; in CycleJS comes in: we need to cycle back
        the state updates from our app up to the <code>fold</code> operation. Luckily, the xstream library has an
        <a href="http://staltz.github.io/xstream/#imitate"><code>imitate</code></a> method on a stream which makes it possible to
        create a fake stream at the top of a function, run operations on it, and then let it imitate a
        &quot;real&quot; stream further down the file. This allows circular dependency of streams.</p>
        <p>Let's fix our code:</p>
        <pre><code class="language-typescript/5,12-17/">import xs from 'xstream';
        
        const run = (main: Main, startState: State) =&gt; {
        // Create &quot;fake&quot;, empty update stream
        const fakeUpdates$ = xs.create();
        
        const state$ = fakeUpdates$.fold(
        (prev, update) =&gt; ({ ...prev, ...update }),
        startState
        );
        
        const appUpdate$ = main(state$);
        
        // Imitate the real state update stream - results are
        // cycled back to the .fold operation above!
        fakeUpdates$.imitate(appUpdate$);
        
        return state$;
        };
        </code></pre>
        <p>-&gt; <a href="http://staltz.github.io/xstream/#create">Docs on <code>xs.create</code></a></p>
        <p>We've successfully achieved feeding our app with a stream of state, and made the output stream of
        the app update the state! 🎉 This creates a <code>main</code> function signature of:</p>
        <pre><code class="language-typescript">type Main = (state$: Stream&lt;State&gt;) =&gt; Stream&lt;Partial&lt;State&gt;&gt;;
        </code></pre>
        <p>Thus, state management is ticked off. You just need to provide the <code>main</code> function which is your
        whole app logic.</p>
        <p>Takeaways:</p>
        <ul>
        <li>We update our state with updates via a stream.</li>
        <li>Our main app function <em>takes a state stream</em> and <em>returns an update stream</em>.</li>
        <li>The state is thus incrementally updated.</li>
        <li>The view is re-rendered each time the state updates.</li>
        </ul>
        <h2>Ch..ch..changes … (to the state)</h2>
        <p>Let's explore the <code>run</code> function from the earlier example. This code below demonstrates how you
        would use it in an app. The <code>run</code> function is thus an export of our library:</p>
        <pre><code class="language-typescript">// run :: (Main, State) -&gt; Stream&lt;State&gt;
        import { run } from 'frap';
        
        interface State {
        name: string;
        }
        
        const startState: State = {
        name: 'Johan',
        };
        
        // Our app's business logic, packaged in a single function.
        // Receives state stream and should return a stream of updates
        // to the state.
        // app :: (Stream&lt;State&gt;) -&gt; Stream&lt;Partial&lt;State&gt;&gt;
        const app: Main = (state$: Stream&lt;State&gt;) =&gt; {
        const stateUpdate$ = xs.create();
        
        return stateUpdate$;
        };
        
        // Kick it off! 🚀
        run(app, startState);
        </code></pre>
        <p>That <code>app</code> function is basically everything there is to it! (almost… we just need to sort out the
        view rendering and handle side effects). We receive state, do stuff deriving off of it, and return
        our preferred updates.</p>
        <p>An example could be:</p>
        <pre><code class="language-typescript/2-5/">const app: Main = (state$: Stream&lt;State&gt;) =&gt; {
        const stateUpdate$ = state$.map((state) =&gt; ({
        name: state.name.toUpperCase(),
        }));
        
        return stateUpdate$;
        };
        </code></pre>
        <p>-&gt; <a href="http://staltz.github.io/xstream/#map">Docs on <code>map</code></a></p>
        <p>This little app of ours would instantly update the <code>name</code> property in our state atom to uppercase:</p>
        <pre><code>--- { name: 'Johan' } ---
        app()
        --- { name: 'JOHAN' } ---
        </code></pre>
        <p>Now, this seems silly and simplistic. I thought so too. &quot;How can I ever achieve complex app logic
        with this?!&quot;. Turns out you can. By using the stream operators of xstream on your data, you really
        <em>can</em> achieve crazy things. It all adds up. For me, it was all about separating the big state down
        into small functions taking care of &quot;their&quot; domain, and then merging it all together:</p>
        <pre><code class="language-typescript">// Functions we've written to take care of stuff in our data model.
        // We don't care how they do it – as long as their return a stream
        // of state updates.
        import { nameUpdate, posts } from './lib';
        
        const app: Main = (state$: Stream&lt;State&gt;) =&gt; {
        const nameUpdate$ = nameUpdate(state$);
        const postsUpdate$ = posts(state$);
        
        // All derived state updates off of existing state
        return xs.merge(nameUpdate$, postsUpdate$);
        };
        </code></pre>
        <p>-&gt; <a href="http://staltz.github.io/xstream/#merge">Docs on <code>xs.merge</code></a></p>
        <p>One important aspect here is the <em>cyclical</em> aspect of our app architecture. Notice how the state
        stream is constantly giving us new state as elements in the stream. Our <code>app</code> function is merely a
        transformer along the way, returning state updates as sinks and receives the new state as source:</p>
        <pre><code>------a---ax---ax------
        app() # Transforms the source stream
        ------ax--ax---axy-----
        </code></pre>
        <p>Once you're used to &quot;thinking in cycles&quot;, it creates quite a nice way of programming even complex
        apps, since the pattern is very scalable. You'll be thinking in &quot;inputs and outputs&quot;, and solely how
        you will transform the inputs to a given output.</p>
        <p>But derived state ain't no fun. In a real app, we've got lots of inputs! Mouse clicks from the user,
        async calls coming back from web APIs – a myriad of things that should update our state. Let's
        investigate the former!</p>
        <h2>Sending -&gt; Messages</h2>
        <p>Any app must deal with user input. Button clicks, text fields, forms, and so on. As our app
        architecture looks so far, there's only derived state updates. Meaning, we only transform the state
        we have already.</p>
        <p><strong>We need to construct a way to let the view pass messages to our app function.</strong></p>
        <p>We haven't looked at the view yet, but remember it's <strong>outside</strong> our pure, cozy, functional world
        inside of our app function. In the app function, we solely deal with functional streams which we
        apply <code>map</code>, <code>filter</code> and other operations on.</p>
        <p>When I say <em>messages</em>, I refer to something like <em>signals</em> or <em>events</em> that are emitted from the UI
        element the user interacted with. We need two things in these messages:</p>
        <ol>
        <li>An identifier in order to distinguish between different kinds of messages.</li>
        <li>An optional payload with data attached to the message.</li>
        </ol>
        <p>Let's see how we can get those messages into our app function!</p>
        <p>We've modelled data as streams so far, so why not continue on that track. Imagine a <code>view$</code> stream
        which is a stream of <em>all</em> different kinds of messages – user input – coming from the view.</p>
        <p>I imagine this flow being something like this:</p>
        <figure id="view-model">
        <img width="413" alt="Messages flow" src="https://johan.im/assets/posts/frap-messages.png" />
        <figcaption>Simplified flow diagram.</figcaption>
        </figure>
        <p>How does a message look like then? Perhaps like this:</p>
        <pre><code class="language-typescript">interface ToggleModal {
        kind: 'toggle_modal';
        modalName: 'surveyModal' | 'loginModal';
        open: boolean;
        }
        
        interface SetPerson {
        kind: 'set_person';
        person: {
        name: string;
        age: number;
        };
        }
        
        type ViewMsg = ToggleModal | SetPerson;
        </code></pre>
        <p>These resemble &quot;actions&quot; you would send to a reducer when using the Flux architecture.</p>
        <p>The last <code>ViewMsg</code> type forms the union type which our messages stream consists of:
        <code>Stream&lt;ViewMsg&gt;</code>. Let's investigate how this fits into our app architecture.</p>
        <p>We've got our <code>app</code> function which produces state updates and receives state from <code>run</code>. The latter
        can be modified to accept a stream of view messages:</p>
        <pre><code class="language-typescript">import xs from 'xstream';
        
        const run = &lt;ViewMsg&gt;(
        main: Main,
        view$: Stream&lt;ViewMsg&gt;,
        startState: State,
        ) =&gt; {
        const fakeUpdates$ = xs.create();
        
        const state$ = stateUpdate$.fold(
        (prev, update) =&gt; ({ ...prev, ...update }),
        startState,
        );
        
        const appUpdate$ = main(state$, view$);
        
        fakeUpdates$.imitate(appUpdate$);
        
        return state$;
        };
        </code></pre>
        <p>I've introduced a generic type <code>ViewMsg</code> in the <code>run</code> function. Let's start our app:</p>
        <pre><code class="language-typescript">// run :: (Main, Stream&lt;V&gt;, State) -&gt; Stream&lt;State&gt;
        import { run } from 'frap';
        
        export interface State {
        name: string;
        }
        
        export const startState: State = {
        name: 'Johan',
        };
        
        interface SetName {
        kind: 'set_name';
        name: string;
        }
        
        export type ViewMsg = SetName;
        
        const app: Main = (state$: Stream&lt;State&gt;, view$: Stream&lt;ViewMsg&gt;) =&gt; {
        const stateUpdate$ = view$
        // Only filter on the `SetName` type of messages
        .filter((m): m is SetName =&gt; !!m.kind &amp;&amp; m.kind === 'set_name')
        // Set a new name by mapping the payload from the message to a state update
        .map((m) =&gt; ({
        name: m.name,
        }));
        
        return xs.merge(stateUpdate$);
        };
        
        // TODO Build view and construct messages stream
        const view$ = xs.create&lt;ViewMsg&gt;();
        
        // Kick it off! 🚀
        run(app, view$, startState);
        </code></pre>
        <p>Now, <em>imagine</em> that the <code>view$</code> stream is working. Imagine that for every time a user is submitting
        a form text field with some text, the view will construct the <code>SetName</code> message object and put it on
        the view stream. This view stream can flow through our app's business logic as a regular function
        parameter, and we can <code>filter</code> to get specific messages and then <code>map</code> them to do state updates.</p>
        <p>This makes the separation between view and business logic pretty clear – which is a good thing! We
        can test our app in isolation by feeding mocked messages into the view stream and asserting the
        resulting state without having to mount the view. The view's actions don't have to be side effects,
        as it's often regarded to be in other app setups.</p>
        <hr>
        <p>So far, we've stayed inside or pure, functional domain of streams. The next section will go through
        the elephant in the room.</p>
        <h2>A View to a <s>kill</s> Stream</h2>
        <p>We begin with this simple but beautiful idea:</p>
        <blockquote>
        <p>ui = view(state)</p>
        </blockquote>
        <p><em>The View is a function of state, producing User Interface.</em></p>
        <p>This idea isn't new of course: it exists in various shapes and philosophies, such as MVC, MVVM, MVI,
        and so on. The concept of having a view that listens to state is a baseline in many design patterns.</p>
        <p><strong>Q:</strong> But how do we do this in Frap? Where we have a single stream of state?</p>
        <p><strong>A:</strong> We rely on a virtual DOM!</p>
        <p>This means, we re-render our whole component tree on each new state update. This feels terribly
        expensive and weird, but we must simply rely on that our virtual DOM implementation will calculate
        the smallest diff in the real DOM and apply that. The whole design idea behind React is built on
        this principle: to rely on the virtual DOM.</p>
        <p>As you saw above in the code samples at the top, UI components in CycleJS use streams as first class
        citizens. The components are really just functions which accepts input streams and return output
        streams. A common lingo in the streams world is <em>Sources</em> and <em>Sinks</em> to signify the input and
        outputs. Thanks to this property of CycleJS, components can receive a stream of values (&quot;props&quot; in
        React world) and return a stream of virtual DOM nodes and a stream of new values, emitted from the
        component. React works differently. React components <em>must</em> return JSX (or a virtual DOM node,
        however you choose to write it). So we just can't make React components return a stream of JSX and
        expect things to work, of course.</p>
        <p>Have a look at the <a href="https://johan.im/writings/frp-app-arch/#view-model">view figure</a> again. We see that the view should accept a
        state stream and &quot;return&quot; a messages stream (I say &quot;return&quot; within quotes since it's not really
        gonna return the stream).</p>
        <p>But how do we draw a whole React app from a stream? We can't return a stream of virtual DOM nodes
        here?</p>
        <p><strong>We must open up the state stream somehow and let it drive the rendering of the top level
        component.</strong></p>
        <p>(This means the React app will re-render on each state update. <em>Again, this is fine</em>. Does the app
        feel slow? Profile with React's dev tools, as
        <a href="https://twitter.com/ryanflorence/status/1126734015950536706">this tweet</a> advises).</p>
        <p>In most stream libraries, there's a method called <code>subscribe</code> which you can use on a stream. In
        xstream, it adds a listener on a stream and returns a subscription that can be used to remove that
        listener (read the <a href="http://staltz.github.io/xstream/#subscribe">docs</a>). We can use that to subscribe
        to state updates, and then unsubscribe when our app unmounts.</p>
        <p>In the <code>next</code> callback of <code>subscribe</code>, we'll receive each new element in the stream (we can also
        catch errors in <code>error</code>). We use <code>next</code> to set the state of the React component at top level. From
        then on, we'll let React figure out how to draw the DOM based on that very state. For each new state
        update, <code>next</code> will be called, and React will re-render the tree. Incremental, immutable state.</p>
        <p>Here's the function signature of <code>run</code>:</p>
        <pre><code class="language-typescript">type Run = (Main, view$: Stream&lt;ViewMsg&gt;, startState: State) =&gt; Stream&lt;State&gt;;
        </code></pre>
        <p>Before, we've just called <code>run</code> for funsies without really thinking too much about where and how
        we'll handle it's output stream. I can reveal to you now that the function should ideally be called
        when your top level React component mounts.</p>
        <pre><code class="language-tsx">import React from 'react';
        import { Stream, Subscription } from 'xstream';
        import { run } from 'frap';
        
        // Imported from our main file
        import { app, startState, State, ViewMsg } from './main.ts';
        
        /** The state of our React component */
        interface AppState {
        state$: Stream&lt;State&gt;;
        /** This holds our &quot;real&quot; app state – ready to render! */
        appState: State;
        }
        
        type Send = (event: ViewMsg) =&gt; void;
        
        class App extends React.Component&lt;any, AppState&gt; {
        /** Instance variable holding the subscription to the state stream. */
        sub: Subscription;
        
        /** Instance function used to drive messages into the view stream. */
        send: Send | null = null;
        
        constructor(props) {
        super(props);
        
        // Stream of input from the views.
        const view$ = xs.create&lt;ViewMsg&gt;();
        
        // Create our &quot;send&quot; function which will drive messages on to
        // the view stream above.
        this.send = (v: ViewMsg) =&gt; {
        view$.shamefullySendNext(v);
        };
        
        // Kick everything off! 🚀
        const state$ = run(app, view$, startState);
        
        // Attach on component's local state so we an access it
        // in life cycle methods
        this.state = {
        state$,
        appState: startState,
        };
        }
        
        componentDidMount(): void {
        // Start subscribing to incoming state and set the local
        // state of our React component. Will trigger re-render.
        this.sub = this.state.state$.subscribe({
        next: (appState) =&gt; {
        this.setState({ appState });
        },
        error: (err) =&gt; {
        console.error(err);
        },
        });
        }
        
        componentWillUnmount(): void {
        // Unsubscribe from state subscription:
        this.sub.unsubscribe();
        }
        
        render(): React.ReactNode {
        const { appState } = this.state;
        
        // Render the 'name' state and a button to change it.
        return (
        &lt;div&gt;
        &lt;h1&gt;Hi {appState.name}!&lt;/h1&gt;
        
        &lt;button
        onClick={() =&gt;
        this.send({
        kind: 'set_name',
        name: 'Johnny Doe',
        })}
        &gt;
        Set another name
        &lt;/button&gt;
        &lt;/div&gt;
        );
        }
        }
        </code></pre>
        <p>(The class approach is a bit verbose, but React Hooks is still a new concept which is outside the
        scope of this post. Here's a
        <a href="https://gist.github.com/brookback/d98efdfb4a3087dbba767910f2eec2f3">GitHub Gist</a> including a Hooks
        version).</p>
        <p>Notice how we:</p>
        <ol>
        <li>Create a <code>view$</code> stream in the constructor and pass it to <code>run</code>.</li>
        <li>Create a <code>send</code> function on the app component which can be used from view event handlers to send
        messages.</li>
        <li>Subscribe to state updates when mounted.</li>
        <li>Render the state in <code>render()</code>.</li>
        </ol>
        <p>The main fishy thing here might be the <code>shamefullySendNext</code> method in <code>send</code>. As from the
        <a href="http://staltz.github.io/xstream/#shamefullySendNext">docs</a>, this method forces a new value to be
        emitted to the stream. This is the one of the two &quot;bridges&quot; between our functional app world and the
        imperative view (the <code>subscribe()</code> call being the other one).</p>
        <p>Phew. Lots of code and concepts. In this section, we've:</p>
        <ul>
        <li>seen how to add the view layer (here React) to our app architecture.</li>
        <li>how to pass actual messages from the view.</li>
        <li>render a React component from our state.</li>
        </ul>
        <p>There's one thing missing still. Where are all the async API calls, browser API functions, and
        logging utilities?</p>
        <p>Yes: where are the <em>side effects</em>?</p>
        <h2>Side effects 💀</h2>
        <p>In any non-trivial application, there <em>will</em> be side effects. Side effects in this case refer to
        things similar to:</p>
        <ul>
        <li>Fetching JSON from an API server</li>
        <li>Using Chrome's media APIs to gain access to the web camera</li>
        </ul>
        <p>The common denominator is that drivers include <em>imperative code</em>. Code that isn't functional
        streams. Code that affect the outside world. Code that is non-pure.</p>
        <p>I recommend reading the <em>Drivers</em> section on <a href="https://cycle.js.org/drivers.html">CycleJS's page</a>,
        since we stole the concept of Drivers from there. There are many good examples there as well.</p>
        <p>Once you've done that, return back here.</p>
        <hr>
        <p>We're gonna use the exact same concept of drivers in Frap. Drivers receive <em>Sinks</em> and return
        <em>Sources</em>. This is in contrast to our main app function, which receives <em>Sources</em> and returns
        <em>Sinks</em>.</p>
        <p>The flow diagram thus becomes:</p>
        <figure id="view-model">
        <img width="624" alt="Driver flow" src="https://johan.im/assets/posts/frap-driver-flow.png" />
        <figcaption>App architecture with drivers and view.</figcaption>
        </figure>
        <p>Let's nail down our Sources and Sinks here.</p>
        <ul>
        <li><strong>To our <code>app</code> function,</strong> Sources are all input sources it needs to do its job. View messages,
        driver input, the state stream. Sinks are output instructions to drivers and state updates.</li>
        <li><strong>To the drivers,</strong> Sources are the output instructions (as a stream) from <code>app()</code>. Sinks can be
        anything.</li>
        </ul>
        <p>The <code>run()</code> function from Frap takes care of glueing all of this together.</p>
        <p>We communicate with the drivers with a single <em>out</em> stream with messages. A driver can thus look
        like:</p>
        <p><strong>Driver</strong></p>
        <pre><code class="language-typescript">// ConsoleLogDriver.ts
        import { Stream } from 'xstream';
        
        interface DoLog {
        kind: 'do_log';
        label: string;
        args?: any[];
        }
        
        export type ConsoleOut = DoLog;
        
        /** A logging driver that consumes log messages and
        * only performs writes to the console.
        */
        const ConsoleLogDriver = (out$: Stream&lt;ConsoleOut&gt;) =&gt; {
        out$.filter((m): m is DoLog =&gt; !!m.kind &amp;&amp; m.kind === 'do_log').addListener(
        (m) =&gt; console.log(m.label, ...m.args),
        );
        };
        
        export default ConsoleLogDriver;
        </code></pre>
        <p>As you see, a driver is 🌈Just A Function 🌈.</p>
        <p>This particular example of a driver only consumes sinks but doesn't return any sources back to our
        <code>app()</code> function.</p>
        <p>How do we hook up this driver? We need to modify the <code>run</code> function!</p>
        <p><strong>Run</strong></p>
        <pre><code class="language-typescript">import xs from 'xstream';
        
        interface Sources&lt;V&gt; {
        view$: Stream&lt;V&gt;;
        drivers?: {
        [key: string]: (s: Stream&lt;any&gt;) =&gt; void | Stream&lt;any&gt;;
        };
        }
        
        const run = &lt;V&gt;(main: Main, sources: Sources, startState: State) =&gt; {
        const { view$, drivers } = sources;
        
        const fakeUpdates$ = xs.create();
        const fakeDriverOuts = createFakeDriverOut(drivers);
        
        const state$ = stateUpdate$.fold((prev, update) =&gt;
        ({ ...prev, ...update }), startState);
        
        // The sources to our app: state, messages, and driver input
        const mainSources = {
        state$,
        view$,
        ...callDrivers(drivers, fakeDriverOuts),
        }
        
        const { stateUpdate$, ...driverSinks } = main(mainSources);
        
        fakeUpdates$.imitate(stateUpdate$);
        
        for (const name in fakeDriverOuts) {
        const fake$ = fakeDriverOuts[name];
        const driverOut$ = driverSinks[name];
        
        fake$.imitate(driverOut$));
        }
        
        return state$;
        };
        </code></pre>
        <p>This might look a bit hairy. I've left out the implementation of two functions here:</p>
        <ul>
        <li><code>createFakeDriverOut</code>. Similarily to the state updates, we need to have a cyclic relationship
        between the drivers' sinks and sources and the main app function. In this function, we create a
        fake stream for each driver specified.</li>
        <li><code>callDrivers</code>. We call all the driver functions with the fake outputs and feed the drivers'
        returned output as sources to our main app function.</li>
        </ul>
        <p><strong>Main app</strong></p>
        <pre><code class="language-typescript">// main.ts
        import { run } from 'frap';
        import { ConsoleOut } from './ConsoleLogDriver.ts';
        
        export interface State {
        name: string;
        }
        
        export const startState: State = {
        name: 'Johan',
        };
        
        interface SetName {
        kind: 'set_name';
        name: string;
        }
        
        export type ViewMsg = SetName;
        
        interface MainSources {
        view$: Stream&lt;ViewMsg&gt;;
        state$: Stream&lt;State&gt;;
        }
        
        interface MainSinks {
        stateUpdate$: Stream&lt;Partial&lt;State&gt;&gt;;
        console: Stream&lt;ConsoleOut&gt;;
        }
        
        const app: Main = (sources: MainSources): MainSinks =&gt; {
        
        // Access driver sources with:
        //   sources.myDriver.*
        
        const stateUpdate$ = /* updates to state */;
        
        // Send log message to log driver every second:
        const logDriverOut$ = xs
        .periodic(1000)
        .mapTo({
        kind: 'do_log',
        label: 'Hello!',
        }):
        
        // Return sinks
        return {
        // State updates as usual
        stateUpdate$,
        // Output instructions to the console driver. The key
        // needs to match the name of the driver specified in
        // the `drivers` argument to `run` below.
        console: logDriverOut$,
        };
        };
        </code></pre>
        <p><strong>View</strong></p>
        <pre><code class="language-typescript">import ConsoleLogDriver from './ConsoleLogDriver.ts';
        
        // In the react view, run our app:
        run(
        app,
        {
        view$,
        drivers: {
        // ... with the console log driver function
        console: ConsoleLogDriver,
        },
        },
        startState,
        );
        </code></pre>
        <hr>
        <p>That's it! Now we can handle all side effects in their special drivers, where they can do all kinds
        of reads and writes with the external world, and safely pass back their results as sources (&quot;input&quot;)
        to our app.</p>
        <h2>Parting words</h2>
        <p>What I love about this architecture we've just built are these things:</p>
        <ul>
        <li>Reasoning in reactive streams! 😍 Forget about mutability and writing imperative code. Say hello
        to declarative code and &quot;tight&quot; business logic.</li>
        <li>How well it goes along with React's virtual DOM nature.</li>
        <li>How the architecture is flexible enough to allow for all varieties of organising your app, still
        being strict with what types you pass around.</li>
        <li>How well it scales. Almost every new feature you'll add to your app will be written in the same
        style.</li>
        <li>How safe I feel when everything from the library layer (Frap) to the view layer (React) is handled
        with a type system (Typescript).</li>
        </ul>
        <p>Here's the complete library code:</p>
        <p class="tc">
        <a href="https://github.com/lookback/frap" class="btn">lookback/frap</a>
        </p>
        <p>A huge shoutout to the creators of CycleJS. We've been inspired by them in just about everything.
        Thanks for popularising the ideas of cyclical data flows!</p>
        <p class="tc">
        <strong>Thank you so much for reading ✨</strong>
        </p>
        ]]>
      </content:encoded>
      <pubDate>Fri, 01 May 2020 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Recent improvements in our git discipline</title>
      <link>https://johan.im/writings/git-guidelines/</link>
      <guid isPermaLink="false">https://johan.im/writings/git-guidelines/</guid>
      <description>The git history of a repository a few years in or with more than one collaborator will look like thick weed unless you take care of it. During last Autumn in Lookback, the engineering team noticed that we needed to take care of some weeds.</description>
      <content:encoded>
        <![CDATA[<p>The git history of a repository a few years in or with more than one collaborator will look like
        thick weed unless you take care of it. During last Autumn in <a href="http://lookback.io/">Lookback</a>, the
        engineering team noticed that we needed to take care of some weeds.</p>
        <p>Not only in our committing code culture, but also in the land of code reviews and Pull Requests at
        GitHub.</p>
        <p>Here are some of the principles and guidelines we worked out.</p>
        <h1>Empathy for others and your future self</h1>
        <p>We say:</p>
        <blockquote>
        <p>&quot;Please have empathy for your coworkers when committing code. Be considerate of them as well as
        your future self&quot;.</p>
        </blockquote>
        <p>When working in a long living code base with lots of complex and moving parts, bugs can surface
        weeks or months after you wrote the code. Guess what system helps you go back in time and find
        exactly what, when, and who changed a line of code?! git can! Guess what doesn't help git help you?
        These things:</p>
        <ul>
        <li>Unclear commit messages.</li>
        <li>Incoherent and too large commits.</li>
        <li>Not easily revertable commits (connected with the above).</li>
        <li>Merge commits.</li>
        </ul>
        <p>Failure to avoid these things will bite you when debugging something in the future.</p>
        <p>For us, we didn't enforce or point these things out in code reviews either. One person could file a
        Pull Request 10+ commits, where some of them wouldn't even be related to the PR itself. It was hard
        to give good feedback on a commit which said <code>fix some things in logging</code>: what did you fix? Why?</p>
        <p>&quot;You've got to give love to receive love&quot;. Meaning, &quot;you've got to give your co-workers good PRs in
        order to receive good feedback&quot;. A related joke is the old &quot;20 commit PR? LGTM. One commit? A
        novella of feedback&quot;.</p>
        <p>We decided to reboot our engineering culture around clean commits and PRs. What follows are some of
        the guidelines we drafted for working with code.</p>
        <hr>
        <h1>1. Committing code</h1>
        <p>Make each commit <strong>atomical</strong>. That is, make it include only the relevant code for your intended
        change. There's a lot to read about this subject on the web.</p>
        <p>When submitting a patch for code review, consider grouping together similar commits with
        <code>git rebase</code>(&quot;squashing&quot;) to keep commit count down (<em>without</em> breaking the rule about atomical
        commits above!).</p>
        <p>The <code>master</code> branch's history should ideally be a long string of commits. We should avoid merge
        commits by rebasing in <code>master</code> into your feature branch before merging back.</p>
        <h2>Commit messages</h2>
        <ul>
        <li>Try to focus on the <em>why</em> in commit messages. Not necessarily <em>what</em>. Think about how this commit
        will be read when doing a <code>git blame</code> half a year later. The reader is probably interested in
        <em>why</em> this change happened.</li>
        <li>Capturing the <em>why</em> context is super important, since it's probably tricky to recover later. Save
        yourself some future slack and capture the why <em>now</em>.</li>
        <li>Adding any references (external stories, cards, etc) is appreciated.</li>
        </ul>
        <p><a href="https://chris.beams.io/posts/git-commit/">&quot;How to Write a Git Commit Message&quot;</a> includes some no
        brainer guidelines for good commit messages.</p>
        <h1>2. Submitting Pull Requests</h1>
        <p><strong>Have mercy for your coworkers.</strong> Don't dump an unstructured, large PR on them with &quot;Review
        this!!&quot;. Be considerate of their time and energy when submitting, as it might be very hard for them
        to get into the context you've been into the last couple of days while working on the code.</p>
        <p>Make all PRs minimal, concise, and relevant. Don't include non-trivial refactors of modules in a PR
        that's really supposed to do something else.</p>
        <p>Avoid long living branches. By making small, incremental changes, we avoid messy merge conflicts and
        best of all: we avoid risky deploys. It's easier to reason about small patches, and potentially
        rolling them back, than huge blobs of &quot;fix everything&quot; PRs.</p>
        <p>Make sure your PR is rebased on <code>master</code> when submitting it. That removes the need for merge commits
        when merging back to <code>master</code>.</p>
        <p>When your PR is ready for review (implies that you also think it's ready for merge), <strong>you must make
        sure it's neat and tidy</strong>.</p>
        <ul>
        <li>Squash any similar commits together.</li>
        <li>Look at each commit and see if it makes sense: does it have a nice message? Is the code changes
        relevant and atomical? If a coworker does a <code>git log</code> in two months, will they be able to
        understand this change?</li>
        </ul>
        <p>After receiving a code review with change requests, always try to squash those changes together with
        the initial commits made when first submitting the PR. It's okay if you have lots of smaller commits
        in your feature branch <em>while working</em> with the code. But once it's ready for review and later merge
        into <code>master</code>, the final PR <em>must</em> be in a concise, minimal state.</p>
        <p>The code reviewer may reject your PR if it's:</p>
        <ul>
        <li>Too large (&quot;please break into separate PRs&quot;).</li>
        <li>Unstructured/needs squashing (&quot;please restructure this PR&quot;, &quot;please redo your commit history&quot;).</li>
        </ul>
        <p>This does <strong><em>not</em></strong> mean &quot;you suck&quot;. It's a signal that you can learn how to avoid this the next
        time, as well as avoding wasting your coworkers' time. We aim to learn and become a better developer
        (and co-developer!) with code reviews, since it's so easy to do your own thing when you've been down
        in a code cave for a couple of days.</p>
        <h1>3. Tools &amp; patterns</h1>
        <p>When rebasing your branch – either to rebase in <code>master</code> or rewrite history – the branch will be
        diverging from the remote, if you've pushed it already. So you need to force push next time
        (<code>git push -f</code>).</p>
        <h2>Commit message templates</h2>
        <p>I just learned about this a couple of months ago: git supports <strong>message templates.</strong> Every time
        you're committing something from an external editor (not from the command line), you can use a
        pre-written template. The template I stole from the post linked below reminds me of the &quot;Because&quot;.
        Why are you even doing this commit? Any business purpose, or is it tech?</p>
        <pre><code>[one line-summary of changes]
        
        Because:
        - [relevant context]
        - [why you decided to change things]
        - [reason you're doing it now]
        
        This commit:
        - [does X]
        - [does Y]
        - [does Z]
        </code></pre>
        <p><a href="https://thoughtbot.com/blog/better-commit-messages-with-a-gitmessage-template">Read more about setting this template up</a>.</p>
        <h2>Rebasing</h2>
        <p>See this guide from the git docs:
        <a href="https://git-scm.com/book/en/v2/Git-Branching-Rebasing">&quot;Rebasing&quot;</a>.</p>
        <p>For instance:</p>
        <pre><code class="language-bash">git checkout my-feature-branch
        # ...do work
        # ...changes have been made in remote master
        # fetch/pull latest master
        git rebase master
        </code></pre>
        <p>This will re-apply your commits in the feature branch on top of what's in <code>master</code> , to make it
        appear as your branch is branched off of latest commit in <code>master</code>.</p>
        <p>💡<strong>Tip:</strong> use <code>git fetch origin master:master</code> from your feature branch to fetch latest <code>master</code>
        without leaving your branch.</p>
        <p>There's a ton of magic things one can do with <code>rebase</code>, please consult the internet or ask coworkers
        about rebasing strategies.</p>
        <ul>
        <li><strong>Do</strong> rebase <code>master</code> into your feature branch when there are upstream changes in <code>master</code>.</li>
        <li><strong>Don't</strong> use <code>git merge</code> when including changes from <code>master</code> to your feature branch.</li>
        </ul>
        <h2>Conflicts</h2>
        <p>At some point, there will be conflicts when rebasing. You'll be able to solve them in the same way
        as when manually solving conflicts when doing <code>git merge</code>. This is all described in the terminal
        when there's a conflict. In a nutshell</p>
        <pre><code class="language-bash"># Find conflicts in code:
        git status
        # ..Fix them :)
        # Mark as resolved:
        git add &lt;file&gt;
        # Continue rebasing
        git rebase --continue
        </code></pre>
        <h2>Force pushing to collaborative branches</h2>
        <p>Rewriting history requires you to force push the PR branch. I.e. you need to push with <code>git push -f</code></p>
        <p>The problem with force pushing is that anyone collaborating on the branch will not be able to just
        <code>git pull</code>. However, git introduced a switch on <code>pull</code> which fixes this:</p>
        <pre><code class="language-bash">git pull --rebase
        </code></pre>
        <p>This is essentially a</p>
        <pre><code class="language-bash">git fetch origin
        git rebase origin/&lt;your-branch&gt;
        </code></pre>
        <h2>Squashing commits together</h2>
        <p>This is nice for when you've done a lot of small, work preserving commits (WIPs or just to not lose
        them) that need to be &quot;beautified&quot; before submitting for review.</p>
        <p>See this guide from the git docs:
        <a href="https://git-scm.com/book/en/v2/Git-Tools-Rewriting-History">&quot;Rewriting History&quot;</a>.</p>
        <p>In a nutshell:</p>
        <pre><code class="language-bash"># -i is for &quot;interactive&quot;
        # git rebase -i &lt;git reference&gt;
        # HEAD~&lt;number of commits to include in rebase&gt;
        git rebase -i HEAD~5
        # or
        git rebase -i git-hash^ # ^ is targetting the parent commit
        </code></pre>
        <p>An editor will open with your included commits listed. There'll be a legend below them describing
        how to rewrite history. You can drop commits (<code>d</code>), squash together commits (<code>s</code>), and more. You'll
        be able to rewrite the commits messages too.</p>
        <h1>Aftermath</h1>
        <p>After we introduced some baselines in how we commit and share code, I personally felt much more
        motivated to keep things neat and tidy (aka.
        <a href="https://en.wikipedia.org/wiki/Broken_windows_theory">&quot;Broken window syndrome&quot;</a>). Git isn't just a
        tool to transport code from your laptop to a server: it's a super cool tool created to help us
        collaborate better, <em>and</em> to fix stuff when things go bad (which <em>will</em> happen sometime).</p>
        <p>I found myself actually enjoying writing extended paragraphs in my commit messages. It brought back
        some memories in doing <a href="https://en.wikipedia.org/wiki/Literate_programming">literate programming</a> in
        CoffeeScript for university lab assignments. The shorter the commit diff, the longer my commit
        message would be – a funny inverse proportional property!</p>
        <p>It also touches me every time I go back and see somebody had put in some effort in the commit
        message, and documented the process, the Why, and the outcome. It's like a time machine in your
        colleagues' minds, and also in their personal development to become better programmers.</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 23 Feb 2020 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>