var P=Object.defineProperty;var e=(t,r)=>P(t,"name",{value:r,configurable:!0});var d={owner:"johanbrook",repo:"johanbrook.com",notesDir:"src/notes"},f=e(()=>location.hostname=="localhost","isLocal");var T=e(t=>t.kind=="err","isErr");var k="jb_tok",U="https://api.github.com",O=e(({url:t})=>{let r=e(()=>{location.href=t},"doAuth"),p=e(async(o,{method:c="GET",query:s,body:n}={})=>{let m=E();if(!m)return r(),Promise.resolve({});let l=s?"?"+new URLSearchParams(s).toString():"",a=await fetch(U+o+l,{method:c,headers:{accept:"application/vnd.github.v3+json",authorization:`token ${m}`},body:n?JSON.stringify(n):void 0}),h=await a.json();return a.ok?h:a.status==401?(r(),Promise.resolve({})):{kind:"err",msg:"Failed to request GitHub REST data",cause:new Error(`${c} ${a.status} ${o}: ${h.message||a.statusText}`)}},"request"),u=e(o=>!!o.error,"isAuthError");return{maybeLogin:e(()=>{E()||(location.href=t)},"maybeLogin"),fetchToken:e(async o=>{let c=location.pathname+location.search.replace(/\bcode=\w+/,"").replace(/\?$/,"");history.pushState({},"",c);let s=await fetch(t,{method:"POST",mode:"cors",headers:{"content-type":"application/json"},body:JSON.stringify({code:o})});if(!s.ok)return{kind:"err",msg:s.statusText};let n=await s.json();if(u(n))return{kind:"err",msg:n.error};try{localStorage.setItem(k,n.token)}catch{}return{kind:"token",tok:n.token}},"fetchToken"),createNote:e(async o=>{let c=new Date,{repo:s,owner:n,notesDir:m}=d,l=f()?"dev":"main",a=S(c),h=S(c,!0),y=`---
date: ${a}
location: On the run
---

${o}

`,w=`${h}.md`,b=m+"/"+w,i=await p(`/repos/${n}/${s}/contents/${b}`,{method:"PUT",body:{message:"Add note from GUI app",content:x(y),branch:l}});return T(i)?i:!i.content?.name||!i.content?.html_url||!i.commit.html_url?{kind:"err",msg:"Unexpected response when creating a note"}:{commitUrl:i.commit.html_url,file:i.content.name,fileUrl:i.content.html_url}},"createNote")}},"mkGitHub"),E=e(()=>{try{return localStorage.getItem(k)}catch{return null}},"getStoredToken"),x=e(t=>btoa(encodeURIComponent(t).replace(/%([0-9A-F]{2})/g,(r,p)=>String.fromCharCode(parseInt(p,16)))),"base64"),S=e((t,r=!1)=>{let p=[t.getUTCFullYear(),t.getUTCMonth()+1,t.getUTCDate()].map(g=>String(g).padStart(2,"0")).join("-"),u=[t.getUTCHours(),t.getUTCMinutes(),r?null:t.getUTCSeconds()].filter(Boolean).map(g=>String(g).padStart(2,"0")).join(r?"-":":");return r?p+"-"+u:p+" "+u},"formatDate");export{O as mkGitHub};
